{"version":3,"sources":["webpack:///./src/components/layout.js","webpack:///./src/templates/tags.js"],"names":["Layout","header","location","title","children","isRootPath","pathname","className","to","data-is-root-path","Tags","pageContext","data","siteTitle","site","siteMetadata","tag","allMarkdownRemark","edges","totalCount","tagHeader","map","node","slug","fields","frontmatter","description","key","dangerouslySetInnerHTML","__html","itemProp"],"mappings":"2FAAA,qCA8BeA,IA3BA,SAAC,GAAmC,IAG7CC,EAHYC,EAAgC,EAAhCA,SAAUC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SAE3BC,EADQ,MACKH,EAASI,SAiB5B,OAbEL,EADEI,EAEA,wBAAIE,UAAU,gBACZ,kBAAC,OAAD,CAAMC,GAAG,KAAKL,IAKhB,kBAAC,OAAD,CAAMI,UAAU,mBAAmBC,GAAG,KACnCL,GAML,yBAAKI,UAAU,iBAAiBE,oBAAmBJ,GACjD,4BAAQE,UAAU,iBAAiBN,GACnC,8BAAOG,M,kCCzBb,wDAuEeM,UA/DF,SAAC,GAAqC,IAAD,EAAlCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMV,EAAe,EAAfA,SAC3BW,GAAY,UAAAD,EAAKE,KAAKC,oBAAV,eAAwBZ,QAAxB,QACVa,EAAQL,EAARK,IAFwC,EAGlBJ,EAAKK,kBAA3BC,EAHwC,EAGxCA,MAAOC,EAHiC,EAGjCA,WACTC,EAAeD,EAAN,SACE,IAAfA,EAAmB,GAAK,KADX,iBAEEH,EAFF,IAIf,OACE,kBAAC,IAAD,CAAQd,SAAUA,EAAUC,MAAOU,GACjC,4BAAKO,GACL,4BACGF,EAAMG,KAAI,YAAe,IAAZC,EAAW,EAAXA,KACJC,EAASD,EAAKE,OAAdD,KACApB,EAAUmB,EAAKG,YAAftB,MACAuB,EAAgBJ,EAAKG,YAArBC,YACR,OACE,6BACE,wBAAIC,IAAKJ,GACP,kBAAC,OAAD,CAAMf,GAAIe,GAAOpB,IAEnB,uBACEyB,wBAAyB,CACvBC,OAAQH,GAEVI,SAAS,qBAUnB,kBAAC,OAAD,CAAMtB,GAAG,SAAT","file":"component---src-templates-tags-js-e0a3236875affbf150c7.js","sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst Layout = ({ location, title, children }) => {\n  const rootPath = `${__PATH_PREFIX__}/`\n  const isRootPath = location.pathname === rootPath\n  let header\n\n  if (isRootPath) {\n    header = (\n      <h1 className=\"main-heading\">\n        <Link to=\"/\">{title}</Link>\n      </h1>\n    )\n  } else {\n    header = (\n      <Link className=\"header-link-home\" to=\"/\">\n        {title}\n      </Link>\n    )\n  }\n\n  return (\n    <div className=\"global-wrapper\" data-is-root-path={isRootPath}>\n      <header className=\"global-header\">{header}</header>\n      <main>{children}</main>\n    </div>\n  )\n}\n\nexport default Layout\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\n\nconst Tags = ({ pageContext, data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <h1>{tagHeader}</h1>\n      <ul>\n        {edges.map(({ node }) => {\n          const { slug } = node.fields\n          const { title } = node.frontmatter\n          const { description } = node.frontmatter\n          return (\n            <div>\n              <h2 key={slug}>\n                <Link to={slug}>{title}</Link>\n              </h2>\n              <p\n                dangerouslySetInnerHTML={{\n                  __html: description,\n                }}\n                itemProp=\"description\"\n              />\n            </div>\n          )\n        })}\n      </ul>\n      {/*\n              This links to a page that does not yet exist.\n              You'll come back to it!\n            */}\n      <Link to=\"/tags\">All tags</Link>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n      siteMetadata {\n        title\n        author {\n          name\n          summary\n          social {\n            github\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___created], order: DESC }\n      filter: { frontmatter: { tag: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            description\n          }\n        }\n      }\n    }\n  }\n`\n"],"sourceRoot":""}