{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/pages/index.js","webpack:///./src/components/post-column.js","webpack:///./src/components/seo.js"],"names":["Bio","authors","useStaticQuery","site","siteMetadata","author","className","style","margin","map","name","src_path","key","width","to","filename","borderRadius","summary","href","social","github","BlogIndex","data","location","siteTitle","title","edges","allMarkdownRemark","length","listStyle","node","PostColumnTemplate","fields","slug","itemScope","itemType","frontmatter","category","itemProp","created","tag","dangerouslySetInnerHTML","__html","description","excerpt","fixed","SEO","lang","meta","metaDescription","defaultTitle","htmlAttributes","titleTemplate","content","property","twitter","concat","defaultProps"],"mappings":"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","file":"component---src-pages-index-js-12a5d0930fb609fbaf44.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Image from \"./image\"\nimport { Link } from \"gatsby\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n            social {\n              github\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const authors = data.site.siteMetadata?.author\n\n  return (\n    <div className=\"bio\" style={{ margin: \"auto\" }}>\n      {authors.map(author => {\n        const name = author.name\n        const src_path = \"profile-pic-\" + name + \".jpg\"\n        return (\n          <div key={'bio-list'} style={{ width: \"50%\" }}>\n            <div style={{ width: \"100px\" }}>\n              <Link to={`/author/${name}/`}>\n                <Image\n                  filename={src_path}\n                  style={{\n                    borderRadius: `50%`,\n                  }}\n                />\n              </Link>\n            </div>\n            {author?.name && (\n              <p>\n                <strong>{author.name}</strong> {author?.summary || null}\n                {` `}\n                <br />\n                <a href={`https://github.com/${author?.social?.github || ``}`}>\n                  Github\n                </a>\n              </p>\n            )}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport PostColumn from \"../components/post-column\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { edges } = data.allMarkdownRemark\n  if (edges.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n      <Bio />\n      <hr />\n      <Link to=\"/tags\">All tags</Link>\n      <ol style={{ listStyle: `none` }}>\n        {edges.map(({ node }) => {\n          return <PostColumn key={\"postcolumn-list\"} node={node} />\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        author {\n          name\n          summary\n          social {\n            github\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___created], order: DESC }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            description\n            tag\n            created(formatString: \"Y-M-D ddd\")\n            author\n            category\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport Image from \"./image\"\n\nconst PostColumnTemplate = ({ node }) => {\n  return (\n    <li className=\"post-list\" key={node.fields.slug}>\n      <article\n        className=\"post-list-item\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <small>\n            <div className={`category ${node.frontmatter.category}`}>\n              <Link to={`/category/${node.frontmatter.category}/`}>\n                {node.frontmatter.category}\n              </Link>\n            </div>\n          </small>\n          <h2>\n            <Link to={node.fields.slug} itemProp=\"url\">\n              <span itemProp=\"headline\">{node.frontmatter.title}</span>\n            </Link>\n          </h2>\n          <small>{node.frontmatter.created}</small>\n          <div className=\"tag-list\">\n            {node.frontmatter.tag?.map(tag => {\n              return (\n                <small key={\"post-list\"}>\n                  <div className=\"tag\">\n                    <Link to={`/tag/${tag}/`}>{tag}</Link>\n                  </div>\n                </small>\n              )\n            })}\n          </div>\n        </header>\n        <section>\n          <p\n            dangerouslySetInnerHTML={{\n              __html: node.frontmatter.description || node.excerpt,\n            }}\n            itemProp=\"description\"\n          />\n        </section>\n        {node.frontmatter.author?.map(name => {\n          return (\n            <small key={\"author-list\"}>\n              <Link to={`/author/${name}/`} className=\"profile-mini\">\n                <figure>\n                  <Image\n                    filename={\"profile-pic-\" + name + \".jpg\"}\n                    style={{\n                      borderRadius: `50%`,\n                    }}\n                    fixed={true}\n                  />\n                </figure>\n                <div>{name}</div>\n              </Link>\n            </small>\n          )\n        })}\n      </article>\n      <hr />\n    </li>\n  )\n}\nexport default PostColumnTemplate\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet, HelmetProvider } from \"react-helmet-async\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author {\n              name\n              summary\n              social {\n                github\n              }\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <HelmetProvider>\n      <Helmet\n        htmlAttributes={{\n          lang,\n        }}\n        title={title}\n        titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n        meta={[\n          {\n            name: `description`,\n            content: metaDescription,\n          },\n          {\n            property: `og:title`,\n            content: title,\n          },\n          {\n            property: `og:description`,\n            content: metaDescription,\n          },\n          {\n            property: `og:type`,\n            content: `website`,\n          },\n          {\n            name: `twitter:card`,\n            content: `summary`,\n          },\n          {\n            name: `twitter:creator`,\n            content: site.siteMetadata?.social?.twitter || ``,\n          },\n          {\n            name: `twitter:title`,\n            content: title,\n          },\n          {\n            name: `twitter:description`,\n            content: metaDescription,\n          },\n        ].concat(meta)}\n        />\n      </HelmetProvider>\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}