{"version":3,"sources":["webpack:///./src/templates/category.js","webpack:///./src/components/post-column.js"],"names":["Category","pageContext","data","location","siteTitle","site","siteMetadata","title","category","allMarkdownRemark","edges","categoryHeader","totalCount","style","listStyle","sort","a","b","atime","btime","node","frontmatter","created","updated","Date","parse","map","to","PostColumnTemplate","date","className","key","fields","slug","itemScope","itemType","itemProp","dateStr","tag","dangerouslySetInnerHTML","__html","description","excerpt","author","name","filename","borderRadius","fixed"],"mappings":"4FAAA,oEAoEeA,UA3DE,SAAC,GAAqC,IAAD,EAAlCC,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC/BC,GAAY,UAAAF,EAAKG,KAAKC,oBAAV,eAAwBC,QAAxB,QACVC,EAAaP,EAAbO,SAF4C,EAGtBN,EAAKO,kBAA3BC,EAH4C,EAG5CA,MAIFC,EAAc,YAAeH,EAAf,MAPgC,EAGrCI,WAIK,IACpB,OACE,kBAAC,IAAD,CAAQT,SAAUA,EAAUI,MAAOH,GACjC,4BAAKO,GACL,wBAAIE,MAAO,CAAEC,UAAU,SACpBJ,EACEK,MAAK,SAAUC,EAAGC,GACjB,IAAIC,EAAOC,EAWX,OATED,EADkC,UAAhCF,EAAEI,KAAKC,YAAYb,SACbQ,EAAEI,KAAKC,YAAYC,QAEnBN,EAAEI,KAAKC,YAAYE,QAG3BJ,EADkC,UAAhCF,EAAEG,KAAKC,YAAYb,SACbS,EAAEG,KAAKC,YAAYC,QAEnBL,EAAEG,KAAKC,YAAYE,QAEtBC,KAAKC,MAAMN,GAASK,KAAKC,MAAMP,MAEvCQ,KAAI,YAAe,IAAZN,EAAW,EAAXA,KACN,OAAO,kBAAC,IAAD,CAAYA,KAAMA,QAG/B,kBAAC,IAAD,CAAMO,GAAG,cAAT,oB,kCCxCN,6DA0EeC,IApEY,SAAC,GAAc,IAAD,IAAXR,EAAW,EAAXA,KAExBS,EAAO,KAMX,OAJEA,EADgC,UAA9BT,EAAKC,YAAYb,SACZY,EAAKC,YAAYC,QAEjBF,EAAKC,YAAYE,QAGxB,wBAAIO,UAAU,YAAYC,IAAKX,EAAKY,OAAOC,MACzC,6BAASH,UAAU,iBAAiBI,WAAS,EAACC,SAAS,6BACrD,gCACE,+BACE,yBAAKL,UAAS,YAAcV,EAAKC,YAAYb,UAC3C,kBAAC,IAAD,CAAMmB,GAAE,aAAeP,EAAKC,YAAYb,UAAaY,EAAKC,YAAYb,YAG1E,4BACE,kBAAC,IAAD,CAAMmB,GAAIP,EAAKY,OAAOC,KAAMG,SAAS,OACnC,0BAAMA,SAAS,YAAYhB,EAAKC,YAAYd,SAGhD,+BACE,kBAAC,IAAD,CAAc8B,QAASR,KAEzB,yBAAKC,UAAU,YAAf,UACGV,EAAKC,YAAYiB,WADpB,aACG,EAAsBZ,KAAI,SAACY,GAC1B,OACE,2BAAOP,IAAK,aAAeO,GACzB,yBAAKR,UAAU,OACb,kBAAC,IAAD,CAAMH,GAAE,QAAUW,EAAV,KAAmBA,UAOvC,iCACE,uBACEC,wBAAyB,CACvBC,OAAQpB,EAAKC,YAAYoB,aAAerB,EAAKsB,SAE/CN,SAAS,iBAhCf,UAmCGhB,EAAKC,YAAYsB,cAnCpB,aAmCG,EAAyBjB,KAAI,SAACkB,GAC7B,OACE,2BAAOb,IAAK,eAAiBa,GAC3B,kBAAC,IAAD,CAAMjB,GAAE,WAAaiB,EAAb,IAAsBd,UAAU,gBACtC,gCACE,kBAAC,IAAD,CACEe,SAAU,eAAiBD,EAAO,OAClC/B,MAAO,CACLiC,aAAa,OAEfC,OAAO,KAGX,6BAAMH,SAMhB","file":"component---src-templates-category-js-b0d32ac2680971e3baf5.js","sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport PostColumn from \"../components/post-column\"\n\nconst Category = ({ pageContext, data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { category } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  // const authorHeader = `${totalCount} post${\n  //   totalCount === 1 ? \"\" : \"s\"\n  // } authorged with \"${author}\"`\n  const categoryHeader = `category ${category} : ${totalCount}ä»¶`\n  return (\n    <Layout location={location} title={siteTitle}>\n      <h2>{categoryHeader}</h2>\n      <ol style={{ listStyle: `none` }}>\n        {edges\n          .sort(function (a, b) {\n            let atime, btime\n            if (a.node.frontmatter.category === \"diary\") {\n              atime = a.node.frontmatter.created\n            } else {\n              atime = a.node.frontmatter.updated\n            }\n            if (b.node.frontmatter.category === \"diary\") {\n              btime = b.node.frontmatter.created\n            } else {\n              btime = b.node.frontmatter.updated\n            }\n            return Date.parse(btime) - Date.parse(atime)\n          })\n          .map(({ node }) => {\n            return <PostColumn node={node} />\n          })}\n      </ol>\n      <Link to=\"/categorys\">All categorys</Link>\n    </Layout>\n  )\n}\n\nCategory.propTypes = {\n  pageContext: PropTypes.shape({\n    category: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Category\n\nexport const pageQuery = graphql`\n  query($category: String) {\n    site {\n      siteMetadata {\n        title\n        author {\n          name\n          summary\n          social {\n            github\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___created], order: DESC }\n      filter: { frontmatter: { category: { in: [$category] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            description\n            created\n            updated\n            tag\n            author\n            category\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport Image from \"./image\"\n\nimport DateStr2Date from \"../components/date\"\n\nconst PostColumnTemplate = ({ node }) => {\n  // let commentDate = new Date(node.frontmatter.created)\n  let date = null\n  if (node.frontmatter.category === \"diary\") {\n    date = node.frontmatter.created\n  } else {\n    date = node.frontmatter.updated\n  }\n  return (\n    <li className=\"post-list\" key={node.fields.slug}>\n      <article className=\"post-list-item\" itemScope itemType=\"http://schema.org/Article\">\n        <header>\n          <small>\n            <div className={`category ${node.frontmatter.category}`}>\n              <Link to={`/category/${node.frontmatter.category}`}>{node.frontmatter.category}</Link>\n            </div>\n          </small>\n          <h2>\n            <Link to={node.fields.slug} itemProp=\"url\">\n              <span itemProp=\"headline\">{node.frontmatter.title}</span>\n            </Link>\n          </h2>\n          <small>\n            <DateStr2Date dateStr={date} />\n          </small>\n          <div className=\"tag-list\">\n            {node.frontmatter.tag?.map((tag) => {\n              return (\n                <small key={\"post-list-\" + tag}>\n                  <div className=\"tag\">\n                    <Link to={`/tag/${tag}/`}>{tag}</Link>\n                  </div>\n                </small>\n              )\n            })}\n          </div>\n        </header>\n        <section>\n          <p\n            dangerouslySetInnerHTML={{\n              __html: node.frontmatter.description || node.excerpt\n            }}\n            itemProp=\"description\"\n          />\n        </section>\n        {node.frontmatter.author?.map((name) => {\n          return (\n            <small key={\"author-list-\" + name}>\n              <Link to={`/author/${name}/`} className=\"profile-mini\">\n                <figure>\n                  <Image\n                    filename={\"profile-pic-\" + name + \".jpg\"}\n                    style={{\n                      borderRadius: `50%`\n                    }}\n                    fixed={true}\n                  />\n                </figure>\n                <div>{name}</div>\n              </Link>\n            </small>\n          )\n        })}\n      </article>\n      <hr />\n    </li>\n  )\n}\nexport default PostColumnTemplate\n"],"sourceRoot":""}