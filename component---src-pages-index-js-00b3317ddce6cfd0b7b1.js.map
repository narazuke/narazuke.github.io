{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/components/latest-comments.js","webpack:///./src/pages/index.js","webpack:///./src/components/post-column.js","webpack:///./src/components/seo.js"],"names":["Bio","authors","useStaticQuery","site","siteMetadata","author","className","style","margin","map","name","src_path","key","width","to","filename","borderRadius","summary","href","social","github","LatestCommentsDisplay","updatedIssues","displayCommentsCount","updatedIssue","comments","totalCount","nodes","comment","login","src","avatarUrl","alt","body","split","updatedAt","BlogIndex","data","location","siteTitle","title","edges","allMarkdownRemark","githubData","organization","repository","issues","length","listStyle","node","PostColumnTemplate","fields","slug","itemScope","itemType","frontmatter","category","itemProp","created","tag","dangerouslySetInnerHTML","__html","description","excerpt","fixed","SEO","lang","meta","metaDescription","defaultTitle","htmlAttributes","titleTemplate","content","property","twitter","concat","defaultProps"],"mappings":"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","file":"component---src-pages-index-js-00b3317ddce6cfd0b7b1.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Image from \"./image\"\nimport { Link } from \"gatsby\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n            social {\n              github\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const authors = data.site.siteMetadata?.author\n\n  return (\n    <div className=\"bio\" style={{ margin: \"auto\" }}>\n      {authors.map(author => {\n        const name = author.name\n        const src_path = \"profile-pic-\" + name + \".jpg\"\n        return (\n          <div key={'bio-list'} style={{ width: \"50%\" }}>\n            <div style={{ width: \"100px\" }}>\n              <Link to={`/author/${name}/`}>\n                <Image\n                  filename={src_path}\n                  style={{\n                    borderRadius: `50%`,\n                  }}\n                />\n              </Link>\n            </div>\n            {author?.name && (\n              <p>\n                <strong>{author.name}</strong> {author?.summary || null}\n                {` `}\n                <br />\n                <a href={`https://github.com/${author?.social?.github || ``}`}>\n                  Github\n                </a>\n              </p>\n            )}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\nimport { Link } from \"gatsby\"\n\nconst LatestCommentsDisplay = ({ updatedIssues }) => {\n  let displayCommentsCount = 0\n  return (\n    <div className=\"recent-comments\">\n      <h6>最新のコメント</h6>\n      <ol className=\"comments-list\">\n        {updatedIssues.map(updatedIssue => {\n          const comments = updatedIssue.comments\n          if (comments.totalCount > 0) {\n            displayCommentsCount += 1\n          }\n          if (displayCommentsCount > 5) return null\n          return (\n            <li className=\"comment-block\">\n              {/* <Link to={`/${updatedIssue.body.split(\"/\")[3]}`}>\n                <div className=\"comment-info\">{updatedIssue.title}</div>\n              </Link> */}\n              {comments.nodes.map(comment => {\n                return (\n                  <div>\n                    <div className=\"comment-main\">\n                      <div className=\"github-avatar\">\n                        <a\n                          href={`https://github.com/${\n                            comment.author.login || ``\n                          }`}\n                        >\n                          {\" \"}\n                          <img src={`${comment.author.avatarUrl}`} alt=\"\"></img>\n                        </a>\n                      </div>\n                      <div className=\"comment-body\">\n                        <div className=\"comment-info\">\n                          {/* <a href={`https://github.com/${comment.author.login || ``}`} */}\n\n                          {comment.author.login}\n                          {/* </a> */}\n                        </div>\n                        <Link to={`/${updatedIssue.body.split(\"/\")[3]}`}>\n                          {comment.body}\n                        </Link>\n                        <div className=\"comment-info\">{comment.updatedAt}</div>\n                      </div>\n                    </div>\n                  </div>\n                )\n              })}\n            </li>\n          )\n        })}\n      </ol>\n    </div>\n  )\n}\nexport default LatestCommentsDisplay\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport PostColumn from \"../components/post-column\"\nimport LatestCommentsDisplay from \"../components/latest-comments\"\n// import CategoriesMini from \"../components/categories-mini\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { edges } = data.allMarkdownRemark\n  const updatedIssues =\n    data.githubData.data.organization.repository.issues.nodes\n  if (edges.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n      <Bio />\n      <Link to=\"/tags\">All tags</Link>\n      {/* <CategoriesMini data={data} /> */}\n      <hr />\n\n      <ol style={{ listStyle: `none` }}>\n        {edges.map(({ node }) => {\n          return <PostColumn key={\"postcolumn-list\"} node={node} />\n        })}\n      </ol>\n      <LatestCommentsDisplay updatedIssues={updatedIssues} />\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        author {\n          name\n          summary\n          social {\n            github\n          }\n        }\n      }\n    }\n    githubData {\n      data {\n        organization {\n          repository {\n            issues {\n              nodes {\n                comments {\n                  totalCount\n                  nodes {\n                    body\n                    updatedAt(formatString: \"YYYY-MM-D ddd HH:mm z\")\n                    author {\n                      login\n                      avatarUrl\n                    }\n                  }\n                }\n                body\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___created], order: DESC }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            description\n            tag\n            created(formatString: \"Y-M-D ddd\")\n            author\n            category\n          }\n        }\n      }\n    }\n    categoriesGroup: allMarkdownRemark(limit: 2000) {\n      group(field: frontmatter___category) {\n        fieldValue\n        totalCount\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport Image from \"./image\"\n\nconst PostColumnTemplate = ({ node }) => {\n  return (\n    <li className=\"post-list\" key={node.fields.slug}>\n      <article\n        className=\"post-list-item\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <small>\n            <div className={`category ${node.frontmatter.category}`}>\n              <Link to={`/category/${node.frontmatter.category}/`}>\n                {node.frontmatter.category}\n              </Link>\n            </div>\n          </small>\n          <h2>\n            <Link to={node.fields.slug} itemProp=\"url\">\n              <span itemProp=\"headline\">{node.frontmatter.title}</span>\n            </Link>\n          </h2>\n          <small>{node.frontmatter.created}</small>\n          <div className=\"tag-list\">\n            {node.frontmatter.tag?.map(tag => {\n              return (\n                <small key={\"post-list\"}>\n                  <div className=\"tag\">\n                    <Link to={`/tag/${tag}/`}>{tag}</Link>\n                  </div>\n                </small>\n              )\n            })}\n          </div>\n        </header>\n        <section>\n          <p\n            dangerouslySetInnerHTML={{\n              __html: node.frontmatter.description || node.excerpt,\n            }}\n            itemProp=\"description\"\n          />\n        </section>\n        {node.frontmatter.author?.map(name => {\n          return (\n            <small key={\"author-list\"}>\n              <Link to={`/author/${name}/`} className=\"profile-mini\">\n                <figure>\n                  <Image\n                    filename={\"profile-pic-\" + name + \".jpg\"}\n                    style={{\n                      borderRadius: `50%`,\n                    }}\n                    fixed={true}\n                  />\n                </figure>\n                <div>{name}</div>\n              </Link>\n            </small>\n          )\n        })}\n      </article>\n      <hr />\n    </li>\n  )\n}\nexport default PostColumnTemplate\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet, HelmetProvider } from \"react-helmet-async\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author {\n              name\n              summary\n              social {\n                github\n              }\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <HelmetProvider>\n      <Helmet\n        htmlAttributes={{\n          lang,\n        }}\n        title={title}\n        titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n        meta={[\n          {\n            name: `description`,\n            content: metaDescription,\n          },\n          {\n            property: `og:title`,\n            content: title,\n          },\n          {\n            property: `og:description`,\n            content: metaDescription,\n          },\n          {\n            property: `og:type`,\n            content: `website`,\n          },\n          {\n            name: `twitter:card`,\n            content: `summary`,\n          },\n          {\n            name: `twitter:creator`,\n            content: site.siteMetadata?.social?.twitter || ``,\n          },\n          {\n            name: `twitter:title`,\n            content: title,\n          },\n          {\n            name: `twitter:description`,\n            content: metaDescription,\n          },\n        ].concat(meta)}\n        />\n      </HelmetProvider>\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}