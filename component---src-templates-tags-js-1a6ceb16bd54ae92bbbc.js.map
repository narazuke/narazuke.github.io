{"version":3,"file":"component---src-templates-tags-js-1a6ceb16bd54ae92bbbc.js","mappings":"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","sources":["webpack://gatsby-starter-blog/./src/components/post-column.js","webpack://gatsby-starter-blog/./src/templates/tags.js"],"sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport Image from \"./image\"\n\nimport DateStr2Date from \"../components/date\"\n\nconst PostColumnTemplate = ({ node }) => {\n  // let commentDate = new Date(node.frontmatter.created)\n  let date = null\n  if (node.frontmatter.category === \"diary\") {\n    date = node.frontmatter.created\n  } else {\n    date = node.frontmatter.updated\n  }\n  return (\n    <li className=\"post-list\" key={node.fields.slug}>\n      <article className=\"post-list-item\" itemScope itemType=\"http://schema.org/Article\">\n        <header>\n          <small>\n            <div className={`category ${node.frontmatter.category}`}>\n              <Link to={`/category/${node.frontmatter.category}`}>{node.frontmatter.category}</Link>\n            </div>\n          </small>\n          <h2>\n            <Link to={node.fields.slug} itemProp=\"url\">\n              <span itemProp=\"headline\">{node.frontmatter.title}</span>\n            </Link>\n          </h2>\n          <small>\n            <DateStr2Date dateStr={date} />\n          </small>\n          <div className=\"tag-list\">\n            {node.frontmatter.tag?.map((tag) => {\n              return (\n                <small key={\"post-list-\" + tag}>\n                  <div className=\"tag\">\n                    <Link to={`/tag/${tag}/`}>{tag}</Link>\n                  </div>\n                </small>\n              )\n            })}\n          </div>\n        </header>\n        <section>\n          <p\n            dangerouslySetInnerHTML={{\n              __html: node.frontmatter.description || node.excerpt\n            }}\n            itemProp=\"description\"\n          />\n        </section>\n        {node.frontmatter.author?.map((name) => {\n          return (\n            <small key={\"author-list-\" + name}>\n              <Link to={`/author/${name}/`} className=\"profile-mini\">\n                <figure>\n                  <Image\n                    filename={\"profile-pic-\" + name + \".jpg\"}\n                    style={{\n                      borderRadius: `50%`\n                    }}\n                    fixed={true}\n                  />\n                </figure>\n                <div>{name}</div>\n              </Link>\n            </small>\n          )\n        })}\n      </article>\n      <hr />\n    </li>\n  )\n}\nexport default PostColumnTemplate\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport PostColumn from \"../components/post-column\"\n\nconst Tags = ({ pageContext, data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  // const tagHeader = `${totalCount} post${\n  //   totalCount === 1 ? \"\" : \"s\"\n  // } tagged with \"${tag}\"`\n  const tagHeader = `\"${tag}\" : ${totalCount}ä»¶`\n  return (\n    <Layout location={location} title={siteTitle}>\n      <h2>{tagHeader}</h2>\n      <ol style={{ listStyle: `none` }}>\n        {edges\n          .sort(function (a, b) {\n            let atime, btime\n            if (a.node.frontmatter.category === \"diary\") {\n              atime = a.node.frontmatter.created\n            } else {\n              atime = a.node.frontmatter.updated\n            }\n            if (b.node.frontmatter.category === \"diary\") {\n              btime = b.node.frontmatter.created\n            } else {\n              btime = b.node.frontmatter.updated\n            }\n            return Date.parse(btime) - Date.parse(atime)\n          })\n          .map(({ node }) => {\n            return <PostColumn node={node} />\n          })}\n      </ol>\n      <Link to=\"/tags\">All tags</Link>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired\n            })\n          })\n        }).isRequired\n      )\n    })\n  })\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    site {\n      siteMetadata {\n        title\n        author {\n          name\n          summary\n          social {\n            github\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___created], order: DESC }\n      filter: { frontmatter: { tag: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            description\n            created\n            updated\n            tag\n            author\n            category\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["_ref","_node$frontmatter$tag","_node$frontmatter$aut","node","date","frontmatter","category","created","updated","React","className","key","fields","slug","itemScope","itemType","Link","to","itemProp","title","DateStr2Date","dateStr","tag","map","dangerouslySetInnerHTML","__html","description","excerpt","author","name","Image","filename","style","borderRadius","fixed","_data$site$siteMetada","pageContext","data","location","siteTitle","site","siteMetadata","edges","totalCount","allMarkdownRemark","tagHeader","Layout","listStyle","sort","a","b","atime","btime","Date","parse","_ref2","PostColumn"],"sourceRoot":""}