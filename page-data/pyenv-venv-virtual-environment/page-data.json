{"componentChunkName":"component---src-templates-blog-post-js","path":"/pyenv-venv-virtual-environment/","result":{"data":{"site":{"siteMetadata":{"title":"NARAZUKE","author":[{"name":"nozzle","summary":"who lives in gummaken.","social":{"github":"nozzlex3"}},{"name":"konnyaku","summary":"who is known as Siege Sukosuko Samurai.","social":{"github":"wabetarou"}}]}},"markdownRemark":{"id":"8e998e58-863c-51b8-a7d9-0de66957e369","excerpt":"pyenvとvenvの違い pyenvはpythonのバージョンの使い分け。 (e.g. python 2.7.13 と python 3.9.0) venvはpythonのパッケージの使い分け。  (e.g. numpyを使う環境 と numpyいらない環境) pyenvの導入 python…","html":"<h2>pyenvとvenvの違い</h2>\n<p>pyenvはpythonのバージョンの使い分け。 (e.g. python 2.7.13 と python 3.9.0)<br>\nvenvはpythonのパッケージの使い分け。  (e.g. numpyを使う環境 と numpyいらない環境)</p>\n<h2>pyenvの導入</h2>\n<h3>pythonのバージョン確認</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">python -V</code></pre></div>\n<p>僕の場合、2.7.13でした。これからpyenvでpython3.x系と自由に切り替えられるようにしよう。</p>\n<h3>導入前に必要なパッケージの導入</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> build-essential libbz2-dev libdb-dev libreadline-dev libffi-dev libgdbm-dev liblzma-dev libncursesw5-dev libsqlite3-dev libssl-dev zlib1g-dev uuid-dev tk-dev</code></pre></div>\n<p>正直どれがなんだか分からないけど、とにかく<code class=\"language-text\">libffi-dev</code>は忘れずにインストールしよう。<br>これが無いとvenvの作業でエラーを吐きます。</p>\n<h3>pyenvのインストール</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> clone https://github.com/pyenv/pyenv.git ~/.pyenv\npyenv versions <span class=\"token comment\"># インストール可能なpythonのバージョンの確認</span>\npyenv <span class=\"token function\">install</span> <span class=\"token number\">3.9</span>.0  <span class=\"token comment\"># 3.9.0が最新(2020/11/09)</span></code></pre></div>\n<p><strong>[注意] pyenv install 3.9.0 はめちゃめちゃ時間かかるから焦らないように</strong></p>\n<h3>pyenvのPATHを通す</h3>\n<p><code class=\"language-text\">.bash_profile</code>に以下の内容を追記しよう</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\">PYENV_ROOT</span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token environment constant\">$HOME</span>/.pyenv\"</span>\n<span class=\"token builtin class-name\">export</span> <span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span><span class=\"token string\">\"<span class=\"token variable\">$PYENV_ROOT</span>/bin:<span class=\"token environment constant\">$PATH</span>\"</span>\n<span class=\"token builtin class-name\">eval</span> <span class=\"token string\">\"<span class=\"token variable\"><span class=\"token variable\">$(</span>pyenv init -<span class=\"token variable\">)</span></span>\"</span>\n<span class=\"token keyword\">if</span> <span class=\"token punctuation\">[</span> -f ~/.bashrc <span class=\"token punctuation\">]</span> <span class=\"token punctuation\">;</span> <span class=\"token keyword\">then</span>\n      <span class=\"token builtin class-name\">.</span> ~/.bashrc\n<span class=\"token keyword\">fi</span></code></pre></div>\n<p><code class=\"language-text\">.bash_profile</code>はログイン時に実行。<br>\n<code class=\"language-text\">.bashrc</code>はbashが開かれる度に実行。</p>\n<p>最後のif文で<code class=\"language-text\">bashrc</code>を読み込ませる。これが無いと、sshしたときにbashの色が無くなる。<br>\nbashの配色は<code class=\"language-text\">bashrc</code>に担われてるのだ。</p>\n<p>参考:<a href=\"https://www.suzu6.net/posts/31/\">ラズパイのセットアップからpyenvを使ってPython3.6環境を構築するまで</a><br>\n参考:<a href=\"https://qiita.com/magicant/items/d3bb7ea1192e63fba850\">本当に正しい .bashrc と .bash_profile の使ひ分け</a><br>\n参考:<a href=\"https://qiita.com/upnt/items/022c5fc916d8a289e326\">Ubuntuで色がなくなる理由と改善策</a>  </p>\n<h3>pyenvで2.xと3.xを行き来</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">python -V</code></pre></div>\n<p><code class=\"language-text\">python 2.7.13</code>と出るはず</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pyenv global <span class=\"token number\">3.9</span>.0\npython -V</code></pre></div>\n<p><code class=\"language-text\">python 3.9.0</code>と出るはず</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pyenv global system</code></pre></div>\n<p><code class=\"language-text\">python 2.7.13</code>と出るはず</p>\n<p>python2.xと3.xが混在してるとき、python3.xを使いたいときはpython3 とかpip3とか書く必要があった。<br>\npyenvのおかげで、pythonと打つだけでpython3系が動くようになった。</p>\n<h2>venvの導入</h2>\n<h3>venvのインストール</h3>\n<p><strong>venvはインストールする必要がない</strong></p>\n<p>venvはpython3.3から標準機能になったため、pyenvで3.9.0を導入しているなら必要がない。</p>\n<h3>venvの仮想環境の作り方</h3>\n<p>仮想環境はプロジェクトごとに作られるから、まず作業したいディレクトリを作成して移動しよう。<br>\n移動したら次のコマンドを打つ。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">python -m venv .venv <span class=\"token comment\"># [.venv]は適当なフォルダ名</span></code></pre></div>\n<p>これもちょっと時間がかかる。<br>\n仮想環境のフォルダに.venvと書くのは慣習的なもの。<br>\n<code class=\"language-text\">myenv</code>とかでもいいよ。  </p>\n<h3>仮想環境の実行</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> .venv/bin/activate</code></pre></div>\n<p>今まで <code class=\"language-text\">pi@raspberrypi</code> だったやつが、<code class=\"language-text\">(.venv) pi@raspberrypi</code> になってたら成功。</p>\n<h3>venv環境下でのモジュールのインストール</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">python -m pip <span class=\"token function\">install</span> numpy   <span class=\"token comment\">#numpyのインストール</span>\npip list    <span class=\"token comment\">#インストールされているモジュールの表示</span></code></pre></div>\n<p>numpyがリストに加わってるはず。</p>\n<h3>仮想環境からの離脱</h3>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">deactivate   <span class=\"token comment\"># 仮想環境からの離脱</span>\npip list</code></pre></div>\n<p>numpyがリストに<strong>無いはず。</strong><br>\nそれもそのはず、numpyは仮想環境.venvで導入したパッケージだからラズパイのpythonパッケージには加わっていないのだ。</p>\n<h3>トラブルシュート:ModuleNotFoundError :No module named ‘_ctypes’</h3>\n<p>numpyをインストールしてる途中で<code class=\"language-text\">&quot;ModuleNotFoundError :No module named &#39;_ctypes&#39;</code>と出ることがあった。    <code class=\"language-text\">libffi-dev</code>が無いと出るエラーらしい。しかし、私の場合、導入してもエラーが消えなかった。あれこれ調べたら、pyenv導入前にlibffi-devがインストールされていないと駄目らしいと判明。</p>\n<p>参考:<a href=\"https://qiita.com/mynkit/items/f8a1a90b99efef4a08a3\">pipenvのinstall時に、No module named ‘_ctypes’が発生する</a></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">pyenv uninstall <span class=\"token number\">3.9</span>.0\n<span class=\"token function\">sudo</span> <span class=\"token function\">apt</span> <span class=\"token function\">install</span> libffi-dev\npyenv <span class=\"token function\">install</span> <span class=\"token number\">3.9</span>.0</code></pre></div>\n<p>このあとでnumpyの導入を試してみよう。きっとうまくいく。</p>\n<p>参考:<a href=\"https://hibiki-press.tech/python/venv/4567\">【Python】venvを使った仮想環境の構築方法</a></p>","frontmatter":{"title":"pyenvとvenvで仮想環境構築 ラズパイ編","created":"2021-2-3 Wed","updated":"2021-2-3 Wed","description":"ラズパイでpythonの仮想環境を作ったときのメモ","tags":null,"author":"nozzle"}},"previous":{"fields":{"slug":"/narazuke-new-feature-candidates/"},"frontmatter":{"title":"NARADUKE新機能候補"}},"next":null},"pageContext":{"id":"8e998e58-863c-51b8-a7d9-0de66957e369","previousPostId":"73af5426-b520-5367-b6b5-2f83dcd22c85","nextPostId":null}},"staticQueryHashes":["3043702316","3321239784","500847697"]}