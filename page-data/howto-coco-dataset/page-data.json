{"componentChunkName":"component---src-templates-blog-post-js","path":"/howto-coco-dataset/","result":{"data":{"site":{"siteMetadata":{"title":"NARAZUKE","author":[{"name":"nozzle","summary":"who lives in gummaken.","social":{"github":"nozzlex3"}},{"name":"konnyaku","summary":"who is known as Siege Sukosuko Samurai.","social":{"github":"wabetarou"}}]}},"markdownRemark":{"id":"075fbd88-1fe8-53d1-8658-60e541b3a897","excerpt":"概要 ある画像から人物を検出しその姿勢を推定することを\"pose estimation\"というが（そのまま）、\n世の中にはこれに関するデータセットがいろいろある。\nこのうち\"COCO\"というのを使ってみる。 前準備 dataset 自体は公式サイトに置いてある。 train2017 val201…","html":"<h2>概要</h2>\n<p>ある画像から人物を検出しその姿勢を推定することを\"pose estimation\"というが（そのまま）、\n世の中にはこれに関するデータセットがいろいろある。\nこのうち\"COCO\"というのを使ってみる。</p>\n<h2>前準備</h2>\n<p>dataset 自体は公式サイトに置いてある。</p>\n<ul>\n<li>train2017</li>\n<li>val2017</li>\n<li>annotations2017</li>\n</ul>\n<p>ここでは以上の三つを使うのでダウンロードする。以下のような階層構造にしておく</p>\n<pre><code>dataset_coco\n   |---annotations\n         |---person_keypoints_train2017.json\n         |---person_keypoints_val2017.json\n   |---train2017\n         |---*.jpg\n   |---val2017\n         |---*.jpg\n</code></pre>\n<p>この dataset を使いやすいデータにしてくれる COCOAPI なるものが github に存在する。\n<a href=\"https://github.com/cocodataset/cocoapi\">https://github.com/cocodataset/cocoapi</a></p>\n<p>これを gitclone して使う。</p>\n<h2>構造の説明</h2>\n<h3>ロード</h3>\n<p>アノテーションのデータをロード</p>\n<pre><code class=\"language-python\">from pycocotools.coco import COCO\n\ntrain_annot_path = '../dataset_coco/annotations/person_keypoints_train2017.json'\nval_annot_path = '../dataset_coco/annotations/person_keypoints_val2017.json'\ntrain_coco = COCO(train_annot_path) # load annotations for training set\nval_coco = COCO(val_annot_path) # load annotations for validation set\n</code></pre>\n<h3>get_meta</h3>\n<p>coco からメタデータを取得する。\nyield は全てのデータを確保せず一回ずつ返す。</p>\n<pre><code class=\"language-python\">def get_meta(coco):\n    ids = list(coco.imgs.keys())\n    for i, img_id in enumerate(ids):\n        img_meta = coco.imgs[img_id]\n        ann_ids = coco.getAnnIds(imgIds=img_id)\n        # basic parameters of an image\n        img_file_name = img_meta['file_name']\n        w = img_meta['width']\n        h = img_meta['height']\n        # retrieve metadata for all persons in the current image\n        anns = coco.loadAnns(ann_ids)\n\n        yield [img_id, img_file_name, w, h, anns]\n</code></pre>","fields":{"slug":"/howto-coco-dataset/"},"frontmatter":{"title":"COCO datasetの使い方","created":"2021-09-17T18:14","updated":"2021-09-17T18:37","description":"姿勢推定のやつ","tag":["dataset","pose-estimation","cv"],"author":["konnyaku"],"category":"tech"}},"previous":{"fields":{"slug":"/no-module-error/"},"frontmatter":{"title":"No module named ~~~ のerror"}},"next":{"fields":{"slug":"/gmail-with-thunderbird/"},"frontmatter":{"title":"ThunderbirdでGmailを自動分類する"}},"relatedPosts":{"totalCount":1,"edges":[{"node":{"fields":{"slug":"/howto-coco-dataset/"},"frontmatter":{"title":"COCO datasetの使い方"}}}]}},"pageContext":{"id":"075fbd88-1fe8-53d1-8658-60e541b3a897","previousPostId":"dbe60188-b4f8-554a-988c-1d6b936f2998","nextPostId":"1a1b13da-18e8-50ea-b70d-138793b7a614","category":"tech","tagList":["dataset","pose-estimation","cv"]}},"staticQueryHashes":["3284037645","500847697"]}