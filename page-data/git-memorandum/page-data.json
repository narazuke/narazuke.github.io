{"componentChunkName":"component---src-templates-blog-post-js","path":"/git-memorandum/","result":{"data":{"site":{"siteMetadata":{"title":"NARAZUKE","author":[{"name":"nozzle","summary":"who lives in gummaken.","social":{"github":"nozzlex3"}},{"name":"konnyaku","summary":"who is known as Siege Sukosuko Samurai.","social":{"github":"wabetarou"}}]}},"markdownRemark":{"id":"546b78b3-1abb-534d-a234-4c136cb30f4d","excerpt":"初期設定 名前,メアド,UI の色,エディタの登録 登録した情報の確認 使い方 リポジトリ初期化 版管理の対象を登録 最初のコミット 変更の記録 変更点の確認 git commitする前に、変更点を確認しよう コミットする git のログメッセージを書く 一行目は変更点を…","html":"<h2>初期設定</h2>\n<h3>名前,メアド,UI の色,エディタの登録</h3>\n<pre><code class=\"language-bash\">git config --global user.name \"Yamada Hanako\"\ngit config --global user.email \"yamahana@takaka.com\"\ngit config --global color.ui auto\ngit config --global core.editor \"vim\"\n</code></pre>\n<h3>登録した情報の確認</h3>\n<pre><code class=\"language-bash\">git config -l\n</code></pre>\n<h2>使い方</h2>\n<h3>リポジトリ初期化</h3>\n<pre><code class=\"language-bash\">git init\n</code></pre>\n<h3>版管理の対象を登録</h3>\n<pre><code class=\"language-bash\">git add index.html\ngit add . #現在のディレクトリ以下全部を登録\ngit ls-files        # git管理下のファイルを一覧表示\n</code></pre>\n<h3>最初のコミット</h3>\n<pre><code class=\"language-bash\">git commit -m \"first commit\"\n</code></pre>\n<h3>変更の記録</h3>\n<pre><code class=\"language-bash\"># index.htmlを適当に変更する\ngit diff    #最新コミットリクエストと現在のデータを比較\ngit add index.html  #最新コミットリクエストに現在のデータをリクエスト\ngit diff    #出力は空になる\n</code></pre>\n<h3>変更点の確認</h3>\n<p><code>git commit</code>する前に、変更点を確認しよう</p>\n<pre><code class=\"language-bash\">git diff HEAD   #最新コミットと現在のデータを比較\n</code></pre>\n<h3>コミットする</h3>\n<pre><code class=\"language-bash\">git add -u  #gitで版管理しているすべてのファイルの現在の状態を次のコミットに記録させる\ngit commit  #コミット\n</code></pre>\n<h3>git のログメッセージを書く</h3>\n<pre><code class=\"language-bash\">日付表示\n\n各記事の前に日付をyyyy/mm/ddの形式で表示するようにした。\n# Please enter the commit message for your changes. Lines starting\n# with '#' will be ignored, and an empty message aborts the commit.\n# On branch master\n# Changes to be committed:\n#   modified index.html\n#\n</code></pre>\n<p>一行目は変更点を 1 行に要約\n二行目は空行\n三行目に詳しい記述</p>\n<p>が鉄板らしい</p>\n<h3>怒られる</h3>\n<pre><code class=\"language-bash\">Warning: commit message did not conform to UTF-8\nYou may want to amend it after fixing the message, or set the config\nvariable i18n.commitencoding to the encoding your pqoject uses.\n[master XXXXXX] .....文字化け....\n</code></pre>\n<h3>vimrc を直す</h3>\n<p>参考:<a href=\"https://qiita.com/takasianpride/items/0d68fcbbcc3aaf22cf9a\" title=\"Gitコミット時の文字化け(MacでVimによるコミット)\">Git コミット時の文字化け(Mac で Vim によるコミット)</a>\n~/.vimrc に以下の内容を追加</p>\n<pre><code class=\"language-bash\">set encoding=utf8\nset fenc=utf-8\n</code></pre>\n<p>うまくいかない....</p>\n<p>参考:<a href=\"http://wadahiro.hatenablog.com/entry/20090506/1241622572\">Git コミットログの文字化けではまる</a></p>\n<pre><code class=\"language-bash\">\" set fileencodings=iso-2022.jp,euc-jp,utf-8,ucs-2,cp912,sjis\nset fileencoding=utf-8\n</code></pre>\n<p>fileencoding の候補が多すぎて勘違いされたらしい。\nUTF-8 だけにしたら文字化け消えた。</p>\n<h3>git add -u と git commit をまとめてやる</h3>\n<pre><code class=\"language-bash\">git commit -a\n</code></pre>\n<p>備考:<code>git add -u</code>は git 管理対象を全部インデックスに登録するコマンド</p>\n<h3>コミット履歴を見る</h3>\n<pre><code class=\"language-bash\">git log\ngit log index.html  #特定のファイルの履歴を見る\ngit log --oneline   #コミットIDと要約したコミットメッセージを1行で表示\ngit log -3          #最新の3件のみ\ngit log -p          #変更内容も表示\n</code></pre>\n<h2>テクニカルな使い方</h2>\n<h3>コミットのメモを書き直す</h3>\n<pre><code class=\"language-bash\">git commit --amend\n</code></pre>\n<h3>ファイル内の行がどのコミットで生まれたものか表示</h3>\n<pre><code class=\"language-bash\">git blame index.html\n</code></pre>\n<p>長いファイルだと、長い</p>\n<h3>過去のコミットの効果を打ち消す</h3>\n<pre><code class=\"language-bash\">git reset --hard [コミットID]\n</code></pre>\n<p>commitID は<code>git log --oneline</code>とかで出てくる黄色いハッシュ値\ncommitID は最初の 8 文字で OK\nコミットオブジェクトを SHA-1 でハッシュ化した 160 ビット(40 文字の 16 進数)の値\nコミットオブジェクトはコミット内容の他に時刻やコミッターやメアドまで含まれるため、同じコミット内容でもハッシュ値は異なる</p>\n<p>これやったらマジで保存したやつ書き換えられた\n驚き</p>\n<h3>最後にコミットしたところまで戻る</h3>\n<pre><code class=\"language-bash\">git reset --hard HEAD\n</code></pre>\n<h2>参考</h2>\n<p>入門 Git (秀和システム 2011)</p>\n<h2>経緯</h2>\n<p>いい加減 git の使い方くらい覚えないといけないのではないか\nまずひとりで版管理できてから、merge とか branch は学んでいこうと思った</p>","fields":{"slug":"/git-memorandum/"},"frontmatter":{"title":"git備忘録","created":"2021-01-31T13:52","updated":"2021-02-15T18:03","description":"忘れがちなgitのコマンドを多数収録ｖ","tag":["git"],"author":["nozzle"],"category":"tech"}},"previous":null,"next":{"fields":{"slug":"/gatsby-environment-settings/"},"frontmatter":{"title":"gatsby環境設定"}},"relatedPosts":{"totalCount":3,"edges":[{"node":{"fields":{"slug":"/gitclone-to-mygithub/"},"frontmatter":{"title":"gitで別のリポジトリからファイルをコピーする"}}},{"node":{"fields":{"slug":"/posh-git-settings/"},"frontmatter":{"title":"gitのブランチ名をPowerShellで表示する"}}},{"node":{"fields":{"slug":"/git-memorandum/"},"frontmatter":{"title":"git備忘録"}}}]}},"pageContext":{"id":"546b78b3-1abb-534d-a234-4c136cb30f4d","previousPostId":null,"nextPostId":"fe6dacd9-39da-5a5c-8875-1fd75650657d","category":"tech","tagList":["git"]}},"staticQueryHashes":["3284037645","500847697"]}