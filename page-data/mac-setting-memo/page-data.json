{"componentChunkName":"component---src-templates-blog-post-js","path":"/mac-setting-memo/","result":{"data":{"site":{"siteMetadata":{"title":"NARAZUKE","author":[{"name":"nozzle","summary":"who lives in gummaken.","social":{"github":"nozzlex3"}},{"name":"konnyaku","summary":"who is known as Siege Sukosuko Samurai.","social":{"github":"wabetarou"}}]}},"markdownRemark":{"id":"3f27bea9-4a05-5b25-8c7f-1162d271115b","excerpt":"まとめ 個人ブログとか Qiita の記事は参考になるが情報が古いことがある。複数のソースを探したり更新日を確認したりするのも大事だが、公式を見た方が良い。 1 ユーザがなんとかできる問題じゃないことが多いので、できない時は素直に諦めた方が良い。 Homebrew 公式 Today I’d like to…","html":"<h2>まとめ</h2>\n<p>個人ブログとか Qiita の記事は参考になるが情報が古いことがある。複数のソースを探したり更新日を確認したりするのも大事だが、公式を見た方が良い。<br>\n1 ユーザがなんとかできる問題じゃないことが多いので、できない時は素直に諦めた方が良い。</p>\n<h2>Homebrew</h2>\n<h3>公式</h3>\n<blockquote>\n<p>Today I’d like to announce Homebrew 3.0.0. The most significant changes since 2.7.0 are official Apple Silicon support and a new bottle format in formulae.</p>\n</blockquote>\n<p>引用：<a href=\"https://brew.sh/2021/02/05/homebrew-3.0.0/\">3.0.0 | Homebrew</a></p>\n<p>ARM 版と x86 版が混在してた時期もあったが、ver3.0.0 で正式に対応したらしい。</p>\n<h3>メモ</h3>\n<p>公式のインストール方法をやりました。</p>\n<pre><code class=\"language-bash:title=zsh\">/bin/bash -c \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\"\n</code></pre>\n<p><code>brew</code>が<code>/opt/homebrew/bin/brew</code>に入った。<br>\nこれは ARM 版らしい。 x86 なら<code>/usr/local/bin/brew</code>に入るから。</p>\n<p><code>lipo -archs $(which hoge)</code>でアーキテクチャを調べられるらしいけど、</p>\n<pre><code>fatal error: /Applications/Xcode.app/Contents/Developer/Toolchains/XcodeDefault.xctoolchain/usr/bin/lipo: can't figure out the architecture type of: /opt/homebrew/bin/brew\n</code></pre>\n<p>って出て怒られた。\nちなみに<code>mv</code>とか<code>ls</code>とか<code>vim</code>とか<code>git</code>とかは universal(どっちも OK)だった。</p>\n<p>brew の PATH を追記しろって言われるので追記しよう</p>\n<pre><code class=\"language-bash:title=.zshrc\">eval $(/opt/homebrew/bin/brew shellenv)\n</code></pre>\n<p>なにこれ？<br>\n<code>export PATH=$PATH:/opt/homebrew/bin</code> で良くね？</p>\n<pre><code class=\"language-bash:title=bash\">echo $(/opt/homebrew/bin/brew shellenv)\n# export HOMEBREW_PREFIX=\"/opt/homebrew\"; export HOMEBREW_CELLAR=\"/opt/homebrew/Cellar\"; export HOMEBREW_REPOSITORY=\"/opt/homebrew\"; export PATH=\"/opt/homebrew/bin:/opt/homebrew/sbin${PATH+:$PATH}\"; export MANPATH=\"/opt/homebrew/share/man${MANPATH+:$MANPATH}:\"; export INFOPATH=\"/opt/homebrew/share/info:${INFOPATH:-}\";`\n</code></pre>\n<p>どうやら brew の PATH 以外にもいろいろやってくれるらしいので、素直に公式の言うことに従いましょう。</p>\n<h2>Anyenv</h2>\n<p>pyenv とか nodenv とか rbenv とかの全部入りパック。</p>\n<h3>インストール</h3>\n<pre><code class=\"language-bash:title=zsh\">brew install anyenv\n</code></pre>\n<p>PATH を通す</p>\n<pre><code class=\"language-bash:title=.zshrc\">eval \"$(anyenv init -)\"\n</code></pre>\n<h3>プラグインのインストール</h3>\n<p>anyenv が参照するバージョンをアップデートしてくれる</p>\n<pre><code class=\"language-bash:title=zsh\">mkdir -p $(anyenv root)/plugins\ngit clone https://github.com/znz/anyenv-update.git $(anyenv root)/plugins/anyenv-update\n</code></pre>\n<p>これで<code>anyenv update</code>をターミナルに打つだけでアプデできる。</p>\n<h2>Python</h2>\n<h3>最初から入ってたやつ</h3>\n<ul>\n<li>python ... 2.7.16</li>\n<li>python3 ... 3.8.2</li>\n</ul>\n<h3>公式</h3>\n<blockquote>\n<p>3.9.1 is the first version of Python to support macOS 11 Big Sur. With Xcode 11 and later it is now possible to build “Universal 2” binaries which work on Apple Silicon.</p>\n</blockquote>\n<p>引用：<a href=\"https://www.python.org/downloads/release/python-391/\">Python 3.9.1 | python</a></p>\n<p>3.9.1 が初めて Apple Sicion で動くバイナリをビルドできるバージョンらしい。</p>\n<h3>pyenv</h3>\n<p>pyenv は python のバージョンを切り替えられるパッケージ。<br>\n詳しくは、<a href=\"https://narazuke.github.io/pyenv-venv-virtual-environment/\">pyenv と venv で仮想環境構築 ラズパイ編</a>を見よう。</p>\n<p>pyenv は<code>brew install pyenv</code>でインストールできる。<br>\n<code>anyenv</code>を導入した人は<code>anyenv install pyenv</code>でインストールできる。</p>\n<h3>トラブルシュート：pyenv install で 3.9.0 以前の python がインストールできない</h3>\n<h4>エラー文</h4>\n<pre><code class=\"language-bash:title=zsh\">$ pyenv install 3.8.8\npython-build: use openssl@1.1 from homebrew\npython-build: use readline from homebrew\nDownloading Python-3.8.8.tar.xz...\n-> https://www.python.org/ftp/python/3.8.8/Python-3.8.8.tar.xz\nInstalling Python-3.8.8...\npython-build: use readline from homebrew\npython-build: use zlib from xcode sdk\n\nBUILD FAILED (OS X 11.2.2 using python-build 1.2.23-54-gabcbf6e1)\n\nInspect or clean up the working tree at /var/folders/ng/t866684x2y301n0c8mqgwj0c0000gn/T/python-build.20210310163954.14672\nResults logged to /var/folders/ng/t866684x2y301n0c8mqgwj0c0000gn/T/python-build.20210310163954.14672.log\n\nLast 10 log lines:\nchecking size of _Bool... 1\nchecking size of off_t... 8\nchecking whether to enable large file support... no\nchecking size of time_t... 8\nchecking for pthread_t... yes\nchecking size of pthread_t... 8\nchecking size of pthread_key_t... 8\nchecking whether pthread_key_t is compatible with int... no\nconfigure: error: Unexpected output of 'arch' on OSX\nmake: *** No targets specified and no makefile found.  Stop.\n</code></pre>\n<p>確かに、3.9.1 が Xcode で build できる最初のバージョンという声明に嘘偽りはありませんでした。</p>\n<h4>対処法</h4>\n<p>pyenv でパッチを当ててインストールすればできる。<br>\n正直どうしてできるか分かってない。</p>\n<pre><code class=\"language-bash:title=zsh\">PYTHON_CONFIGURE_OPTS=\"--enable-framework\" pyenv install --patch 3.8.7 &#x3C;&#x3C;(curl -sSL \"https://raw.githubusercontent.com/Homebrew/formula-patches/9811be33170a8f31a684fae6955542e31eb4e61e/python/3.8.7.patch\")\n</code></pre>\n<p>参考：<a href=\"https://qiita.com/hjmr/items/b81de997d4c2b64ef140\">M1 MacBook での開発環境構築 | Qiita</a></p>\n<p><img src=\"./mac-setting-memo_01.png\">\n<em>誰だお前は!?</em></p>\n<p>この方法でインストールするとアプリ版もついてくるらしい。やめてほしい。</p>\n<h2>poetry</h2>\n<h3>poetry とは</h3>\n<blockquote>\n<p>Poetry is a tool for dependency management and packaging in Python. It allows you to declare the libraries your project depends on and it will manage (install/update) them for you.</p>\n</blockquote>\n<p>引用：<a href=\"https://python-poetry.org/docs/\">Introduction | poetry</a></p>\n<p>python のパッケージ管理を便利にしてくれるやつ。<br>\n<code>venv</code>みたいなやつだけど、仮想環境の情報が残ってくれるのであとから見ても使いやすいのでこっちに乗り換えた。</p>\n<h3>インストール方法</h3>\n<pre><code>curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -\n</code></pre>\n<p>いつもの PATH 通すやつをやる</p>\n<pre><code class=\"language-bash:title=.zshrc\">export PATH=\"$HOME/.poetry/bin:$PATH\"\n</code></pre>\n<p>poetry の使い方とかもメモしたいけど、とりあえずインストール方法と.zshrc の追記内容に留める。</p>\n<h3>プロジェクト内に仮想環境フォルダを作る</h3>\n<pre><code class=\"language-bash:title=zsh\">poetry config virtualenvs.in-project true\n</code></pre>\n<p>もう仮想環境作っちゃってしまった人は、\n<code>poetry config virtualenvs.path</code>で仮想環境の保存場所を調べて、そのディレクトリごと消せばいい。</p>\n<h3>トラブル：poetry add opencv-python するとエラーを吐く</h3>\n<h4>エラー文</h4>\n<pre><code class=\"language-bash:title=zsh\">EnvCommandError\n\n(中略)\n\n  at ~/.poetry/lib/poetry/utils/env.py:1074 in _run\n      1070│                 output = subprocess.check_output(\n      1071│                     cmd, stderr=subprocess.STDOUT, **kwargs\n      1072│                 )\n      1073│         except CalledProcessError as e:\n    → 1074│             raise EnvCommandError(e, input=input_)\n      1075│\n      1076│         return decode(output)\n      1077│\n      1078│     def execute(self, bin, *args, **kwargs):\n</code></pre>\n<p>解決してません。</p>\n<h2>Node.js</h2>\n<h3>nodenv</h3>\n<h4>インストール</h4>\n<p>node のバージョン管理してくれるやつ。<br>\nnodenv には nodebrew と nvm というライバルが 2 人いる。<br>\nanyenv はぶっちゃけ名前で nodenv を選んでそうに思える。</p>\n<p>nodenv は<code>brew install nodenv</code>でインストールできる。<br>\n<code>anyenv</code>を導入した人は<code>anyenv install nodenv</code>でインストールできる。</p>\n<h4>使い方</h4>\n<pre><code class=\"language-bash:title=zsh\">nodenv install --list       # インストール可能なnodeのバージョンを一覧表示\nnodenv install x.x.x        # バージョン x.x.x をインストールする\nnodenv versions             # インストールしたnodeのバージョンを一覧表示\nnodenv global x.x.x         # どのシステムでもバージョンx.x.xのnodeを使う\nnodenv local x.x.x          # 現在のディレクトリではバージョンx.x.xのnodeを使う\n</code></pre>\n<h3>トラブルシュート：\"FATAL ERROR: wasm code commit Allocation failed - process out of memory\"とでて、パッケージを入れられない</h3>\n<h4>対処法</h4>\n<p>node のバージョンを 15.3.0 以降にすると治る<br>\n安定版っていうから 14.16.0 を入れたのに...<br>\n参考：<a href=\"https://stackoverflow.com/questions/65856300/wasm-code-commit-allocation-failed-process-out-of-memory\">wasm code commit Allocation failed - process out of memory | stack overflow </a></p>\n<h2>Git</h2>\n<h3>基本設定</h3>\n<pre><code class=\"language-bash\">git config --global user.name \"Yamada Hanako\"\ngit config --global user.email \"yamahana@takaka.com\"\ngit config --global color.ui auto\ngit config --global core.editor \"vim\"\n</code></pre>\n<p><a href=\"https://narazuke.github.io/git-memorandum/\">git 備忘録 | NARAZUKE</a></p>\n<h3>補完</h3>\n<pre><code class=\"language-bash:title=zsh\">mkdir ~/.zsh\ncd ~/.zsh\ncurl -o git-prompt.sh https://raw.githubusercontent.com/git/git/master/contrib/completion/git-prompt.sh\ncurl -o git-completion.bash https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.bash\ncurl -o _git https://raw.githubusercontent.com/git/git/master/contrib/completion/git-completion.zsh\n</code></pre>\n<p>.zshrc に追記する</p>\n<pre><code class=\"language-bash:title=.zshrc\">source ~/.zsh/git-prompt.sh\nfpath=(~/.zsh $fpath)\nzstyle ':completion:*:*:git:*' script ~/.zsh/git-completion.bash\nautoload -Uz compinit &#x26;&#x26; compinit\nGIT_PS1_SHOWDIRTYSTATE=true\nGIT_PS1_SHOWUNTRACKEDFILES=true\nGIT_PS1_SHOWSTASHSTATE=true\nGIT_PS1_SHOWUPSTREAM=auto\nsetopt PROMPT_SUBST ; PS1='%F{green}%n@%m%f: %F{cyan}%~%f %F{red}$(__git_ps1 \"(%s)\")%f\\$ '\n</code></pre>\n<p>メモとはいえまるパクリで申し訳ない。<br>\nQiita サービス終了に備えて書き置きしておきます。\n下の参考記事を読もう。</p>\n<p>これやるとユーザ名が緑になるし、ディレクトリもフルパスが出るようになって最高！zshrc の設定ものちのちやりたい。</p>\n<p>参考：<a href=\"https://qiita.com/mikan3rd/items/d41a8ca26523f950ea9d\">【zsh】絶対やるべき！ターミナルで git のブランチ名を表示&#x26;補完【git-prompt / git-completion】| Qiita</a></p>\n<h2>SSH</h2>\n<h3>秘密鍵と公開鍵の作成</h3>\n<pre><code class=\"language-bash:title=zsh\">ssh-keygen -t rsa -b 4096 -C \"hoge@hogenomacbookair\"\n</code></pre>\n<p><code>-C</code>でつけるコメントには、\"github のアカウントのユーザとメアド\"派と、\"端末のユーザ名とホスト名\"派がいる。</p>\n<p>参考：<a href=\"https://qiita.com/suthio/items/2760e4cff0e185fe2db9\">お前らの SSH Keys の作り方は間違っている | Qiita</a></p>\n<p>github の setting に登録したらあとは<code>ssh -T git@github.com</code>してちゃんとできてるか確認すればいい。</p>\n<h3>config を作る</h3>\n<pre><code class=\"language-bash:title=.ssh/config\">Host hoge\n  HostName 192.168.1.x\n  User foo\n  Port 10022\n  IdentityFile ~/.ssh/id_rsa\n</code></pre>\n<p>こんな感じで作れる</p>\n<h2>VS Code</h2>\n<p>(2021 年 3 月 13 日追記)</p>\n<blockquote>\n<p>We are happy to announce our first release of stable Apple Silicon builds this iteration. Users on Macs with M1 chips can now use VS Code without emulation with Rosetta, and will notice better performance and longer battery life when running VS Code.</p>\n</blockquote>\n<p>引用元：<a href=\"https://code.visualstudio.com/updates/v1_54\">February 2021 (version 1.54) | Visual Studio Code</a></p>\n<p>2021 年 2 月のアップデートで Apple Silicon に対応した VSCode が入手できる。<br>\n起動したら<code>Cmd+Shift+p</code>で<code>code</code>と入力して、ターミナルに<code>code</code>コマンドを導入しよう。</p>\n<p>(追記おわり)</p>\n<p><del>VS Code はまだ Apple Silicon に対応していないが、Insiders 版が対応している。<br>\nとはいえ、Insiders 版にしなくても支障がないと思われます。</del></p>\n<p>どうしても Insiders 版を使いたい人は以下からダウンロードできる。</p>\n<p><a href=\"https://code.visualstudio.com/insiders/\">Download Visual Studio Code Insiders | Visual Studio Code</a></p>\n<pre><code class=\"language-bash:title=zsh\">lipo -archs /Applications/Visual\\ Studio\\ Code\\ -\\ Insiders.app/Contents/MacOS/Electron\n# arm64\n</code></pre>\n<p>確かに、arm64 版であることを確認しました。</p>\n<p>Insiders 版はターミナルから起動する時、<code>code-insiders</code>と入力する。長いので.zshrc でエイリアスを登録する。</p>\n<pre><code class=\"language-bash:title=.zshrc\">alias code='code-insiders'\n</code></pre>","fields":{"slug":"/mac-setting-memo/"},"frontmatter":{"title":"M1 Mac環境構築メモ","created":"2021-03-10T14:27","updated":"2021-03-13T08:12","description":"目まぐるしいM1対応の波を乗りこなせ","tag":["mac","memo"],"author":["nozzle"],"category":"tech"}},"previous":{"fields":{"slug":"/kon20210309/"},"frontmatter":{"title":"日記"}},"next":{"fields":{"slug":"/raspberrypi-google-drive/"},"frontmatter":{"title":"ラズパイでGoogle Driveを使う"}},"relatedPosts":{"totalCount":17,"edges":[{"node":{"fields":{"slug":"/nozzakkan004/"},"frontmatter":{"title":"雑感 四川省"}}},{"node":{"fields":{"slug":"/raspberrypi-setting-memo/"},"frontmatter":{"title":"ラズパイ環境設定メモ"}}},{"node":{"fields":{"slug":"/self-access-restriction/"},"frontmatter":{"title":"hostsを弄らせて欲を断つ"}}},{"node":{"fields":{"slug":"/mac-backslash/"},"frontmatter":{"title":"Macでバックスラッシュを入力する"}}},{"node":{"fields":{"slug":"/mac-setting-memo/"},"frontmatter":{"title":"M1 Mac環境構築メモ"}}},{"node":{"fields":{"slug":"/mac-impression/"},"frontmatter":{"title":"Mac所感"}}},{"node":{"fields":{"slug":"/ximea-error-56/"},"frontmatter":{"title":"ximeaのnot found errorについて"}}},{"node":{"fields":{"slug":"/cpp-memo/"},"frontmatter":{"title":"c++のoptionについて"}}},{"node":{"fields":{"slug":"/cpp-option/"},"frontmatter":{"title":"c++のoptionについて"}}},{"node":{"fields":{"slug":"/brew-doctor/"},"frontmatter":{"title":"brew doctorをやってみた"}}},{"node":{"fields":{"slug":"/xcode-error/"},"frontmatter":{"title":"xcode関連のerrorについて"}}},{"node":{"fields":{"slug":"/ximea-tutorial/"},"frontmatter":{"title":"ximeaカメラの環境設定"}}},{"node":{"fields":{"slug":"/gitclone-to-mygithub/"},"frontmatter":{"title":"gitで別のリポジトリからファイルをコピーする"}}},{"node":{"fields":{"slug":"/chinese/"},"frontmatter":{"title":"中国語メモ"}}},{"node":{"fields":{"slug":"/arknights-auto/"},"frontmatter":{"title":"アークナイツ周回の自動化(Mac,C++)"}}},{"node":{"fields":{"slug":"/vim-command/"},"frontmatter":{"title":"Vimのコマンド"}}},{"node":{"fields":{"slug":"/arknights-recruit/"},"frontmatter":{"title":"アークナイツの公開求人"}}}]}},"pageContext":{"id":"3f27bea9-4a05-5b25-8c7f-1162d271115b","previousPostId":"bde3b281-522b-5c0d-916f-99567ceb6d9c","nextPostId":"5e0638c2-8379-5d25-a96d-a8ea7ac060e3","category":"tech","tagList":["mac","memo"]}},"staticQueryHashes":["3284037645","500847697"]}