{"componentChunkName":"component---src-templates-blog-post-js","path":"/cmake/","result":{"data":{"site":{"siteMetadata":{"title":"NARAZUKE","author":[{"name":"nozzle","summary":"who lives in gummaken.","social":{"github":"nozzlex3"}},{"name":"konnyaku","summary":"who is known as Siege Sukosuko Samurai.","social":{"github":"wabetarou"}}]}},"markdownRemark":{"id":"ede95e03-9d7f-5a9a-b88b-3247eea1e439","excerpt":"きっかけ アークナイツ自動周回の記事でc++を使ったが、\nコンパイル時にフレームワークやらpkg-configやらを入力していたので、大変。 コンパイルしたい時にいちいちメモを開かないといけない。 cmakeを使えばそんなことをしなくていい気がするので使ってみる。 まずは基本をやってみる main.cpp…","html":"<h3>きっかけ</h3>\n<p><a href=\"https://narazuke.github.com/arknights-auto\">アークナイツ自動周回</a>の記事でc++を使ったが、\nコンパイル時にフレームワークやらpkg-configやらを入力していたので、大変。</p>\n<pre><code class=\"language-shell\">g++ -std=c++11 -framework CoreGraphics -framework CoreFoundation main.cpp `pkg-config --cflags opencv4` `pkg-config --libs opencv4`\n</code></pre>\n<p>コンパイルしたい時にいちいちメモを開かないといけない。</p>\n<p>cmakeを使えばそんなことをしなくていい気がするので使ってみる。</p>\n<h3>まずは基本をやってみる</h3>\n<ol>\n<li>\n<p>main.cppとCMakeLists.txtを書く</p>\n<pre><code class=\"language-cpp:title=main.cpp\">#include &#x3C;iostream>\nint main() {\nstd::cout &#x3C;&#x3C; \"Hello, world!\" &#x3C;&#x3C; std::endl;\nreturn 0;\n}\n</code></pre>\n<pre><code class=\"language-t:title=CMakeLists.txt\">cmake_minimum_required(VERSION 3.1)\nproject(hello_world CXX)\nadd_executable(main_app main.cpp)\n</code></pre>\n</li>\n<li>\n<p>buildフォルダを作る(ごちゃごちゃするから)</p>\n<pre><code>&#x3C;プロジェクトディレクトリ>\n|-main.cpp\n|-CMakeLists.txt\n|-build/\n</code></pre>\n</li>\n<li>\n<p>buildフォルダ内でConfigureとGenerateを実行する</p>\n<pre><code class=\"language-shell:title=shell\">cmake ..\n</code></pre>\n<p><code>..</code>はCmakeList.txtの場所を示す\n<img src=\"./configure.png\"></p>\n</li>\n<li>\n<p>ビルドする</p>\n<pre><code class=\"language-shell:title=shell\">cmake --build . \n</code></pre>\n<p><code>.</code>はbuildフォルダを示す</p>\n</li>\n</ol>\n<p><img src=\"./build.png\"></p>\n<ol start=\"5\">\n<li>結果</li>\n</ol>\n<p><img src=\"./result.png\"></p>\n<h3>実際にcmakeを適用してみる</h3>\n<h4>外部ライブラリの導入</h4>\n<p>とりあえず上記のCMakeLists.txtのままやってみたら外部ライブラリのincludeでエラーを出したのでやってみる。</p>\n<p><code>find_package()</code>で外部ライブラリを探せる。\nCMakeLists.txtに<code>find_package(OpenCV 4.5.1)</code>という一文を追加したらちゃんと探せた。</p>\n<pre><code class=\"language-shell:title=shell\">-- Found OpenCV: /usr/local/Cellar/opencv/4.5.1_2 (found suitable version \"4.5.1\", minimum required is \"4.5.1\") \n</code></pre>\n<p>最終的に<a href=\"https://cha-shu00.hatenablog.com/entry/2018/09/02/143853\">【C++】OpenCV3をOSXにインストールしてcmakeで優勝💪💪【完全に理解した】</a>\nをコピペした</p>\n<pre><code class=\"language-t:title=CMakeLists.txt\">cmake_minimum_required(VERSION 3.1)\nproject(arknights_auto CXX)\nset(CMAKE_CXX_STANDARD 11)\nset(CMAKE_CXX_FLAGS \"${CMAKE_CXX_FLAGS} -Wall\")\nfind_package(OpenCV 4.5.1 REQUIRED)\ninclude_directories( ${OpenCV_INCLUDE_DIRS} )\nadd_executable(main_app main.cpp)\ntarget_link_libraries(main_app ${OpenCV_LIBS})\n</code></pre>\n<p><code>CMAKE_CXX_STANDARD</code>にはバージョン、\n<code>CMAKE_CXX_FLAGS</code>にoptionをセットできる。\nここでは直接入力値を代入できるが、<code>add_definitions</code>でも設定できる。\n<code>include_directories</code>でincludeして、\n<code>target_link_libraries</code>でopencvのライブラリとリンクしている。\nフレームワークもこれで指定できる。\nでも<code>target_link_libraries</code>は使わないライブラリもリンクするからよくないらしい。\nCoreGraphicsのフレームワークもこれで入れる。\n最終的には次のようにしてコンパイルできるようになった。</p>\n<pre><code class=\"language-t:title=CMakeLists.txt\">cmake_minimum_required(VERSION 3.1)\nproject(arknights_auto CXX)\nset(CMAKE_CXX_STANDARD 11)\nadd_definitions(-std=c++11 -Wall)\nfind_package(OpenCV 4.5.1 REQUIRED)\ninclude_directories( ${OpenCV_INCLUDE_DIRS} )\nadd_executable(main_app main.cpp)\ntarget_link_libraries(main_app ${OpenCV_LIBS})\ntarget_link_libraries(main_app \"-framework CoreGraphics\")\ntarget_link_libraries(main_app \"-framework CoreFoundation\")\n</code></pre>\n<p><img src=\"./final.png\"></p>\n<h3>参考</h3>\n<p><a href=\"https://kamino.hatenablog.com/entry/cmake_tutorial1\">勝手に作るCMake入門 その1 基本的な使い方</a></p>\n<p><a href=\"https://qiita.com/sanishi_pompom/items/02b158dfad3a5dafd0a1\">OpenCV4.1.0をCMakeを使って導入する方法(Visual Studio 2019)</a></p>\n<p><a href=\"https://cha-shu00.hatenablog.com/entry/2018/09/02/143853\">【C++】OpenCV3をOSXにインストールしてcmakeで優勝💪💪【完全に理解した】</a></p>\n<p><a href=\"https://qiita.com/progrhyme/items/c0f21e2a71cfe6fdb7a8\">CMake覚え書き</a></p>\n<p>最後のリンクは項目化してあってわかりやすい</p>","fields":{"slug":"/cmake/"},"frontmatter":{"title":"cmakeをつかう","created":"2021-02-20T10:23","updated":"2021-02-22T13:18","description":"コンパイルを楽にしたいのでcmakeつかいます","tag":["cmake","cpp"],"author":["konnyaku"],"category":"tech"}},"previous":{"fields":{"slug":"/kon20210219/"},"frontmatter":{"title":"日記"}},"next":{"fields":{"slug":"/kon20210220/"},"frontmatter":{"title":"日記"}},"relatedPosts":{"totalCount":4,"edges":[{"node":{"fields":{"slug":"/optitrack/"},"frontmatter":{"title":"optitrack"}}},{"node":{"fields":{"slug":"/cpp-memo/"},"frontmatter":{"title":"c++のoptionについて"}}},{"node":{"fields":{"slug":"/cpp-option/"},"frontmatter":{"title":"c++のoptionについて"}}},{"node":{"fields":{"slug":"/cmake/"},"frontmatter":{"title":"cmakeをつかう"}}}]}},"pageContext":{"id":"ede95e03-9d7f-5a9a-b88b-3247eea1e439","previousPostId":"0c39dcb0-4631-57f4-9e34-735ef9bea280","nextPostId":"447f5da5-c1a4-574f-978d-dc1663d2bf4c","category":"tech","tagList":["cmake","cpp"]}},"staticQueryHashes":["3284037645","500847697"]}