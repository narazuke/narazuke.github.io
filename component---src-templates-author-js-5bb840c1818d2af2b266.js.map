{"version":3,"file":"component---src-templates-author-js-5bb840c1818d2af2b266.js","mappings":"2KA0EA,IApE2B,SAAC,GAAc,IAAD,IAAXA,EAAW,EAAXA,KAExBC,EAAO,KAMX,OAJEA,EADgC,UAA9BD,EAAKE,YAAYC,SACZH,EAAKE,YAAYE,QAEjBJ,EAAKE,YAAYG,QAGxB,sBAAIC,UAAU,YAAYC,IAAKP,EAAKQ,OAAOC,MACzC,2BAASH,UAAU,iBAAiBI,WAAS,EAACC,SAAS,6BACrD,8BACE,6BACE,uBAAKL,UAAS,YAAcN,EAAKE,YAAYC,UAC3C,gBAAC,KAAD,CAAMS,GAAE,aAAeZ,EAAKE,YAAYC,UAAaH,EAAKE,YAAYC,YAG1E,0BACE,gBAAC,KAAD,CAAMS,GAAIZ,EAAKQ,OAAOC,KAAMI,SAAS,OACnC,wBAAMA,SAAS,YAAYb,EAAKE,YAAYY,SAGhD,6BACE,gBAAC,IAAD,CAAcC,QAASd,KAEzB,uBAAKK,UAAU,YAAf,UACGN,EAAKE,YAAYc,WADpB,aACG,EAAsBC,KAAI,SAACD,GAC1B,OACE,yBAAOT,IAAK,aAAeS,GACzB,uBAAKV,UAAU,OACb,gBAAC,KAAD,CAAMM,GAAE,QAAUI,EAAV,KAAmBA,UAOvC,+BACE,qBACEE,wBAAyB,CACvBC,OAAQnB,EAAKE,YAAYkB,aAAepB,EAAKqB,SAE/CR,SAAS,iBAhCf,UAmCGb,EAAKE,YAAYoB,cAnCpB,aAmCG,EAAyBL,KAAI,SAACM,GAC7B,OACE,yBAAOhB,IAAK,eAAiBgB,GAC3B,gBAAC,KAAD,CAAMX,GAAE,WAAaW,EAAb,IAAsBjB,UAAU,gBACtC,8BACE,gBAAC,IAAD,CACEkB,SAAU,eAAiBD,EAAO,OAClCE,MAAO,CACLC,aAAa,OAEfC,OAAO,KAGX,2BAAMJ,SAMhB,8B,wECFN,UA3De,SAAC,GAAqC,IAAD,EAAlCK,EAAkC,EAAlCA,YAAaC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC7BC,GAAY,UAAAF,EAAKG,KAAKC,oBAAV,eAAwBnB,QAAxB,QACVQ,EAAWM,EAAXN,OACR,EAA8BO,EAAKK,kBAA3BC,EAAR,EAAQA,MAIFC,EAAY,UAAad,EAAb,MAJlB,EAAee,WAIG,IAClB,OACE,gBAAC,IAAD,CAAQP,SAAUA,EAAUhB,MAAOiB,GACjC,0BAAKK,GACL,sBAAIX,MAAO,CAAEa,UAAU,SACpBH,EACEI,MAAK,SAAUC,EAAGC,GACjB,IAAIC,EAAOC,EAWX,OATED,EADkC,UAAhCF,EAAExC,KAAKE,YAAYC,SACbqC,EAAExC,KAAKE,YAAYE,QAEnBoC,EAAExC,KAAKE,YAAYG,QAG3BsC,EADkC,UAAhCF,EAAEzC,KAAKE,YAAYC,SACbsC,EAAEzC,KAAKE,YAAYE,QAEnBqC,EAAEzC,KAAKE,YAAYG,QAEtBuC,KAAKC,MAAMF,GAASC,KAAKC,MAAMH,MAEvCzB,KAAI,YAAe,IAAZjB,EAAW,EAAXA,KACN,OAAO,gBAAC,IAAD,CAAYA,KAAMA,QAG/B,gBAAC,KAAD,CAAMY,GAAG,YAAT","sources":["webpack://gatsby-starter-blog/./src/components/post-column.js","webpack://gatsby-starter-blog/./src/templates/author.js"],"sourcesContent":["import React from \"react\"\nimport { Link } from \"gatsby\"\nimport Image from \"./image\"\n\nimport DateStr2Date from \"../components/date\"\n\nconst PostColumnTemplate = ({ node }) => {\n  // let commentDate = new Date(node.frontmatter.created)\n  let date = null\n  if (node.frontmatter.category === \"diary\") {\n    date = node.frontmatter.created\n  } else {\n    date = node.frontmatter.updated\n  }\n  return (\n    <li className=\"post-list\" key={node.fields.slug}>\n      <article className=\"post-list-item\" itemScope itemType=\"http://schema.org/Article\">\n        <header>\n          <small>\n            <div className={`category ${node.frontmatter.category}`}>\n              <Link to={`/category/${node.frontmatter.category}`}>{node.frontmatter.category}</Link>\n            </div>\n          </small>\n          <h2>\n            <Link to={node.fields.slug} itemProp=\"url\">\n              <span itemProp=\"headline\">{node.frontmatter.title}</span>\n            </Link>\n          </h2>\n          <small>\n            <DateStr2Date dateStr={date} />\n          </small>\n          <div className=\"tag-list\">\n            {node.frontmatter.tag?.map((tag) => {\n              return (\n                <small key={\"post-list-\" + tag}>\n                  <div className=\"tag\">\n                    <Link to={`/tag/${tag}/`}>{tag}</Link>\n                  </div>\n                </small>\n              )\n            })}\n          </div>\n        </header>\n        <section>\n          <p\n            dangerouslySetInnerHTML={{\n              __html: node.frontmatter.description || node.excerpt\n            }}\n            itemProp=\"description\"\n          />\n        </section>\n        {node.frontmatter.author?.map((name) => {\n          return (\n            <small key={\"author-list-\" + name}>\n              <Link to={`/author/${name}/`} className=\"profile-mini\">\n                <figure>\n                  <Image\n                    filename={\"profile-pic-\" + name + \".jpg\"}\n                    style={{\n                      borderRadius: `50%`\n                    }}\n                    fixed={true}\n                  />\n                </figure>\n                <div>{name}</div>\n              </Link>\n            </small>\n          )\n        })}\n      </article>\n      <hr />\n    </li>\n  )\n}\nexport default PostColumnTemplate\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\n\nimport Layout from \"../components/layout\"\nimport PostColumn from \"../components/post-column\"\n\nconst Author = ({ pageContext, data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { author } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  // const authorHeader = `${totalCount} post${\n  //   totalCount === 1 ? \"\" : \"s\"\n  // } authorged with \"${author}\"`\n  const authorHeader = `author ${author} : ${totalCount}ä»¶`\n  return (\n    <Layout location={location} title={siteTitle}>\n      <h2>{authorHeader}</h2>\n      <ol style={{ listStyle: `none` }}>\n        {edges\n          .sort(function (a, b) {\n            let atime, btime\n            if (a.node.frontmatter.category === \"diary\") {\n              atime = a.node.frontmatter.created\n            } else {\n              atime = a.node.frontmatter.updated\n            }\n            if (b.node.frontmatter.category === \"diary\") {\n              btime = b.node.frontmatter.created\n            } else {\n              btime = b.node.frontmatter.updated\n            }\n            return Date.parse(btime) - Date.parse(atime)\n          })\n          .map(({ node }) => {\n            return <PostColumn node={node} />\n          })}\n      </ol>\n      <Link to=\"/authors\">All authors</Link>\n    </Layout>\n  )\n}\n\nAuthor.propTypes = {\n  pageContext: PropTypes.shape({\n    author: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Author\n\nexport const pageQuery = graphql`\n  query($author: String) {\n    site {\n      siteMetadata {\n        title\n        author {\n          name\n          summary\n          social {\n            github\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___created], order: DESC }\n      filter: { frontmatter: { author: { in: [$author] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            description\n            created\n            updated\n            tag\n            author\n            category\n          }\n        }\n      }\n    }\n  }\n`\n"],"names":["node","date","frontmatter","category","created","updated","className","key","fields","slug","itemScope","itemType","to","itemProp","title","dateStr","tag","map","dangerouslySetInnerHTML","__html","description","excerpt","author","name","filename","style","borderRadius","fixed","pageContext","data","location","siteTitle","site","siteMetadata","allMarkdownRemark","edges","authorHeader","totalCount","listStyle","sort","a","b","atime","btime","Date","parse"],"sourceRoot":""}