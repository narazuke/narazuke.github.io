{"version":3,"sources":["webpack:///./src/components/seo.js","webpack:///./src/templates/blog-post.js"],"names":["SEO","description","lang","meta","title","site","useStaticQuery","metaDescription","siteMetadata","defaultTitle","htmlAttributes","titleTemplate","name","content","property","social","twitter","concat","defaultProps","BlogPostTemplate","data","location","post","markdownRemark","siteTitle","previous","next","frontmatter","excerpt","className","itemScope","itemType","itemProp","created","tag","map","to","filename","author","style","borderRadius","height","fixed","dangerouslySetInnerHTML","__html","html","index","length","display","flexWrap","justifyContent","listStyle","padding","fields","slug","rel"],"mappings":"2FAAA,iDAYMA,EAAM,SAAC,GAAwC,IAAD,MAArCC,EAAqC,EAArCA,YAAaC,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,MAC9BC,EAASC,YAAe,aAAxBD,KAoBFE,EAAkBN,GAAeI,EAAKG,aAAaP,YACnDQ,EAAY,UAAGJ,EAAKG,oBAAR,aAAG,EAAmBJ,MAExC,OACE,kBAAC,SAAD,CACEM,eAAgB,CACdR,QAEFE,MAAOA,EACPO,cAAeF,EAAY,QAAWA,EAAiB,KACvDN,KAAM,CACJ,CACES,KAAK,cACLC,QAASN,GAEX,CACEO,SAAS,WACTD,QAAST,GAEX,CACEU,SAAS,iBACTD,QAASN,GAEX,CACEO,SAAS,UACTD,QAAQ,WAEV,CACED,KAAK,eACLC,QAAQ,WAEV,CACED,KAAK,kBACLC,SAAS,UAAAR,EAAKG,oBAAL,mBAAmBO,cAAnB,eAA2BC,UAA3B,IAEX,CACEJ,KAAK,gBACLC,QAAST,GAEX,CACEQ,KAAK,sBACLC,QAASN,IAEXU,OAAOd,MAKfH,EAAIkB,aAAe,CACjBhB,KAAK,KACLC,KAAM,GACNF,YAAY,IAUCD,O,kCC9Ff,gFAiGemB,UA1FU,SAAC,GAAwB,IAAD,IAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SAC1BC,EAAOF,EAAKG,eACZC,GAAY,UAAAJ,EAAKf,KAAKG,oBAAV,eAAwBJ,QAAxB,QACVqB,EAAmBL,EAAnBK,SAAUC,EAASN,EAATM,KAClB,OACE,kBAAC,IAAD,CAAQL,SAAUA,EAAUjB,MAAOoB,GACjC,kBAAC,IAAD,CACEpB,MAAOkB,EAAKK,YAAYvB,MACxBH,YAAaqB,EAAKK,YAAY1B,aAAeqB,EAAKM,UAEpD,6BACEC,UAAU,YACVC,WAAS,EACTC,SAAS,6BAET,gCACE,wBAAIC,SAAS,YAAYV,EAAKK,YAAYvB,OAC1C,2BAAIkB,EAAKK,YAAYM,SACrB,yBAAKJ,UAAU,YAAf,UACGP,EAAKK,YAAYO,WADpB,aACG,EAAsBC,KAAI,SAAAD,GACzB,OACE,+BACE,yBAAKL,UAAU,OACb,kBAAC,IAAD,CAAMO,GAAE,SAAWF,EAAX,KAAoBA,SAMtC,2BAAOL,UAAU,gBACf,gCACE,kBAAC,IAAD,CACEQ,SAAU,eAAiBf,EAAKK,YAAYW,OAAS,OACrDC,MAAO,CACLC,aAAa,MACbC,OAAO,QAETC,OAAO,KAGX,6BACGpB,EAAKK,YAAYW,UAIxB,6BACA,6BACEK,wBAAyB,CAAEC,OAAQtB,EAAKuB,MACxCb,SAAS,gBAEX,qCAEIV,EAAKK,YAAYW,OAAOH,KAAI,SAACvB,EAAKkC,GAClC,OAAIA,IAAQxB,EAAKK,YAAYW,OAAOS,OAAO,EACjC,IAAInC,EAEP,IAAIA,EAAK,SAItB,yBAAKiB,UAAU,iBACb,wBACEU,MAAO,CACLS,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAGX,4BACG3B,GACC,kBAAC,IAAD,CAAMW,GAAIX,EAAS4B,OAAOC,KAAMC,IAAI,QAApC,KACK9B,EAASE,YAAYvB,QAI9B,4BACGsB,GACC,kBAAC,IAAD,CAAMU,GAAIV,EAAK2B,OAAOC,KAAMC,IAAI,QAC7B7B,EAAKC,YAAYvB,MADpB","file":"component---src-templates-blog-post-js-9768412f5faabe470884.js","sourcesContent":["/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author {\n              name\n              summary\n              social {\n                github\n              }\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\nimport Image from \"../components/image\"\n\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\n\nconst BlogPostTemplate = ({ data, location }) => {\n  const post = data.markdownRemark\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { previous, next } = data\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO\n        title={post.frontmatter.title}\n        description={post.frontmatter.description || post.excerpt}\n      />\n      <article\n        className=\"blog-post\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n          <p>{post.frontmatter.created}</p>\n          <div className=\"tag-list\">\n            {post.frontmatter.tag?.map(tag => {\n              return (\n                <small>\n                  <div className=\"tag\">\n                    <Link to={`/tags/${tag}/`}>{tag}</Link>\n                  </div>\n                </small>\n              )\n            })}\n          </div>\n          <small className=\"profile-mini\">\n            <figure>\n              <Image\n                filename={\"profile-pic-\" + post.frontmatter.author + \".jpg\"}\n                style={{\n                  borderRadius: `50%`,\n                  height: `100%`,\n                }}\n                fixed={true}\n              />\n            </figure>\n            <div>\n              {post.frontmatter.author}\n            </div>\n          </small>\n        </header>\n        <hr />\n        <section\n          dangerouslySetInnerHTML={{ __html: post.html }}\n          itemProp=\"articleBody\"\n        />\n        <footer>\n          by \n          {(post.frontmatter.author.map((name,index)=>{\n            if (index===post.frontmatter.author.length-1){\n              return (\" \"+name)\n            }\n            return(\" \"+name+\",\")\n          }))}\n        </footer>\n      </article>\n      <nav className=\"blog-post-nav\">\n        <ul\n          style={{\n            display: `flex`,\n            flexWrap: `wrap`,\n            justifyContent: `space-between`,\n            listStyle: `none`,\n            padding: 0,\n          }}\n        >\n          <li>\n            {previous && (\n              <Link to={previous.fields.slug} rel=\"prev\">\n                ← {previous.frontmatter.title}\n              </Link>\n            )}\n          </li>\n          <li>\n            {next && (\n              <Link to={next.fields.slug} rel=\"next\">\n                {next.frontmatter.title} →\n              </Link>\n            )}\n          </li>\n        </ul>\n      </nav>\n    </Layout>\n  )\n}\n\nexport default BlogPostTemplate\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug(\n    $id: String!\n    $previousPostId: String\n    $nextPostId: String\n  ) {\n    site {\n      siteMetadata {\n        title\n        author {\n          name\n          summary\n          social {\n            github\n          }\n        }\n      }\n    }\n    markdownRemark(id: { eq: $id }) {\n      id\n      excerpt(pruneLength: 160)\n      html\n      frontmatter {\n        title\n        created(formatString: \"Y-M-D ddd\")\n        updated(formatString: \"Y-M-D ddd\")\n        description\n        tag\n        author\n      }\n    }\n    previous: markdownRemark(id: { eq: $previousPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n    next: markdownRemark(id: { eq: $nextPostId }) {\n      fields {\n        slug\n      }\n      frontmatter {\n        title\n      }\n    }\n  }\n`\n"],"sourceRoot":""}