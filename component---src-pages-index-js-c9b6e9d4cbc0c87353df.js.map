{"version":3,"sources":["webpack:///./src/components/bio.js","webpack:///./src/pages/index.js","webpack:///./src/components/post-column.js","webpack:///./src/components/seo.js"],"names":["Bio","authors","useStaticQuery","site","siteMetadata","author","className","style","margin","map","src_path","name","width","filename","borderRadius","summary","href","social","github","BlogIndex","data","location","siteTitle","title","edges","allMarkdownRemark","length","to","listStyle","node","PostColumnTemplate","class","key","fields","slug","itemScope","itemType","itemProp","frontmatter","created","tag","dangerouslySetInnerHTML","__html","description","excerpt","height","SEO","lang","meta","metaDescription","defaultTitle","htmlAttributes","titleTemplate","content","property","twitter","concat","defaultProps"],"mappings":"mJA+DeA,EApDH,WAAO,IAAD,EAkBVC,EAAO,UAjBAC,YAAe,cAiBPC,KAAKC,oBAAb,aAAG,EAAwBC,OAExC,OACE,yBAAKC,UAAU,MAAMC,MAAO,CAAEC,OAAQ,SACnCP,EAAQQ,KAAI,SAAAJ,GAAW,IAAD,EAEfK,EAAW,eADJL,EAAOM,KACqB,OACzC,OACE,yBAAKJ,MAAO,CAAEK,MAAO,QACnB,yBAAKL,MAAO,CAAEK,MAAO,UACnB,kBAAC,IAAD,CACEC,SAAUH,EACVH,MAAO,CACLO,aAAa,WAIlBT,aAAA,EAAAA,EAAQM,OACP,2BACE,gCAASN,EAAOM,MADlB,KACkCN,aAAA,EAAAA,EAAQU,UAAW,KADrD,IAGE,6BACA,uBAAGC,KAAI,wBAAwBX,SAAA,UAAAA,EAAQY,cAAR,eAAgBC,SAAhB,KAA/B,iB,oCCVDC,UAjCG,SAAC,GAAwB,IAAD,EAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACnBC,GAAY,UAAAF,EAAKjB,KAAKC,oBAAV,eAAwBmB,QAAxB,QACVC,EAAUJ,EAAKK,kBAAfD,MAER,OAAqB,IAAjBA,EAAME,OAEN,kBAAC,IAAD,CAAQL,SAAUA,EAAUE,MAAOD,GACjC,kBAAC,IAAD,CAAKC,MAAM,cACX,kBAAC,EAAD,MACA,yLAUJ,kBAAC,IAAD,CAAQF,SAAUA,EAAUE,MAAOD,GACjC,kBAAC,IAAD,CAAKC,MAAM,cACX,kBAAC,EAAD,MACA,6BACA,kBAAC,IAAD,CAAMI,GAAG,SAAT,YACA,wBAAIpB,MAAO,CAAEqB,UAAU,SACpBJ,EAAMf,KAAI,YAAe,IAAZoB,EAAW,EAAXA,KACZ,OAAO,kBAAC,IAAD,CAAYA,KAAMA,W,kCClCnC,iDAyDeC,IArDY,SAAC,GAAc,IAAD,EAAXD,EAAW,EAAXA,KAE5B,OACE,wBAAIE,MAAM,YAAYC,IAAKH,EAAKI,OAAOC,MACrC,6BACE5B,UAAU,iBACV6B,WAAS,EACTC,SAAS,6BAET,gCACE,4BACE,kBAAC,IAAD,CAAMT,GAAIE,EAAKI,OAAOC,KAAMG,SAAS,OACnC,0BAAMA,SAAS,YAAYR,EAAKS,YAAYf,SAGhD,+BAAQM,EAAKS,YAAYC,SACzB,yBAAKjC,UAAU,YAAf,UACGuB,EAAKS,YAAYE,WADpB,aACG,EAAsB/B,KAAI,SAAA+B,GACzB,OACE,+BACE,yBAAKlC,UAAU,OACb,kBAAC,IAAD,CAAMqB,GAAE,SAAWa,EAAX,KAAoBA,UAOxC,iCACE,uBACEC,wBAAyB,CACvBC,OAAQb,EAAKS,YAAYK,aAAed,EAAKe,SAE/CP,SAAS,iBAGb,2BAAO/B,UAAU,gBACf,gCACE,kBAAC,IAAD,CACEO,SAAU,eAAiBgB,EAAKS,YAAYjC,OAAS,OACrDE,MAAO,CACLO,aAAa,MACb+B,OAAO,WAIZhB,EAAKS,YAAYjC,SAGtB,gC,kCCrDN,iDAYMyC,EAAM,SAAC,GAAwC,IAAD,MAArCH,EAAqC,EAArCA,YAAaI,EAAwB,EAAxBA,KAAMC,EAAkB,EAAlBA,KAAMzB,EAAY,EAAZA,MAC9BpB,EAASD,YAAe,aAAxBC,KAoBF8C,EAAkBN,GAAexC,EAAKC,aAAauC,YACnDO,EAAY,UAAG/C,EAAKC,oBAAR,aAAG,EAAmBmB,MAExC,OACE,kBAAC,SAAD,CACE4B,eAAgB,CACdJ,QAEFxB,MAAOA,EACP6B,cAAeF,EAAY,QAAWA,EAAiB,KACvDF,KAAM,CACJ,CACErC,KAAK,cACL0C,QAASJ,GAEX,CACEK,SAAS,WACTD,QAAS9B,GAEX,CACE+B,SAAS,iBACTD,QAASJ,GAEX,CACEK,SAAS,UACTD,QAAQ,WAEV,CACE1C,KAAK,eACL0C,QAAQ,WAEV,CACE1C,KAAK,kBACL0C,SAAS,UAAAlD,EAAKC,oBAAL,mBAAmBa,cAAnB,eAA2BsC,UAA3B,IAEX,CACE5C,KAAK,gBACL0C,QAAS9B,GAEX,CACEZ,KAAK,sBACL0C,QAASJ,IAEXO,OAAOR,MAKfF,EAAIW,aAAe,CACjBV,KAAK,KACLC,KAAM,GACNL,YAAY,IAUCG","file":"component---src-pages-index-js-c9b6e9d4cbc0c87353df.js","sourcesContent":["/**\n * Bio component that queries for data\n * with Gatsby's useStaticQuery component\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport { useStaticQuery, graphql } from \"gatsby\"\nimport Image from \"./image\"\n\nconst Bio = () => {\n  const data = useStaticQuery(graphql`\n    query BioQuery {\n      site {\n        siteMetadata {\n          author {\n            name\n            summary\n            social {\n              github\n            }\n          }\n        }\n      }\n    }\n  `)\n\n  // Set these values by editing \"siteMetadata\" in gatsby-config.js\n  const authors = data.site.siteMetadata?.author\n\n  return (\n    <div className=\"bio\" style={{ margin: \"auto\" }}>\n      {authors.map(author => {\n        const name = author.name\n        const src_path = \"profile-pic-\" + name + \".jpg\"\n        return (\n          <div style={{ width: \"50%\" }}>\n            <div style={{ width: \"100px\" }}>\n              <Image\n                filename={src_path}\n                style={{\n                  borderRadius: `50%`,\n                }}\n              />\n            </div>\n            {author?.name && (\n              <p>\n                <strong>{author.name}</strong> {author?.summary || null}\n                {` `}\n                <br />\n                <a href={`https://github.com/${author?.social?.github || ``}`}>\n                  Github\n                </a>\n              </p>\n            )}\n          </div>\n        )\n      })}\n    </div>\n  )\n}\n\nexport default Bio\n","import React from \"react\"\nimport { Link, graphql } from \"gatsby\"\n\nimport Bio from \"../components/bio\"\nimport Layout from \"../components/layout\"\nimport SEO from \"../components/seo\"\nimport PostColumn from \"../components/post-column\"\n\nconst BlogIndex = ({ data, location }) => {\n  const siteTitle = data.site.siteMetadata?.title || `Title`\n  const { edges } = data.allMarkdownRemark\n\n  if (edges.length === 0) {\n    return (\n      <Layout location={location} title={siteTitle}>\n        <SEO title=\"All posts\" />\n        <Bio />\n        <p>\n          No blog posts found. Add markdown posts to \"content/blog\" (or the\n          directory you specified for the \"gatsby-source-filesystem\" plugin in\n          gatsby-config.js).\n        </p>\n      </Layout>\n    )\n  }\n\n  return (\n    <Layout location={location} title={siteTitle}>\n      <SEO title=\"All posts\" />\n      <Bio />\n      <hr />\n      <Link to=\"/tags\">All tags</Link>\n      <ol style={{ listStyle: `none` }}>\n        {edges.map(({ node }) => {\n          return <PostColumn node={node} />\n        })}\n      </ol>\n    </Layout>\n  )\n}\n\nexport default BlogIndex\n\nexport const pageQuery = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        author {\n          name\n          summary\n          social {\n            github\n          }\n        }\n      }\n    }\n    allMarkdownRemark(\n      limit: 2000\n      sort: { fields: [frontmatter___created], order: DESC }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n            description\n            tag\n            created(formatString: \"Y-M-D ddd\")\n            author\n          }\n        }\n      }\n    }\n  }\n`\n","import React from \"react\"\nimport { Link } from \"gatsby\"\nimport Image from \"./image\"\n\nconst PostColumnTemplate = ({ node }) => {\n  //   const { node } = data.allMarkdownRemark.edges\n  return (\n    <li class=\"post-list\" key={node.fields.slug}>\n      <article\n        className=\"post-list-item\"\n        itemScope\n        itemType=\"http://schema.org/Article\"\n      >\n        <header>\n          <h2>\n            <Link to={node.fields.slug} itemProp=\"url\">\n              <span itemProp=\"headline\">{node.frontmatter.title}</span>\n            </Link>\n          </h2>\n          <small>{node.frontmatter.created}</small>\n          <div className=\"tag-list\">\n            {node.frontmatter.tag?.map(tag => {\n              return (\n                <small>\n                  <div className=\"tag\">\n                    <Link to={`/tags/${tag}/`}>{tag}</Link>\n                  </div>\n                </small>\n              )\n            })}\n          </div>\n        </header>\n        <section>\n          <p\n            dangerouslySetInnerHTML={{\n              __html: node.frontmatter.description || node.excerpt,\n            }}\n            itemProp=\"description\"\n          />\n        </section>\n        <small className=\"profile-mini\">\n          <figure>\n            <Image\n              filename={\"profile-pic-\" + node.frontmatter.author + \".jpg\"}\n              style={{\n                borderRadius: `50%`,\n                height: `100%`,\n              }}\n            />\n          </figure>\n          {node.frontmatter.author}\n        </small>\n      </article>\n      <hr />\n    </li>\n  )\n}\nexport default PostColumnTemplate\n","/**\n * SEO component that queries for data with\n *  Gatsby's useStaticQuery React hook\n *\n * See: https://www.gatsbyjs.com/docs/use-static-query/\n */\n\nimport React from \"react\"\nimport PropTypes from \"prop-types\"\nimport { Helmet } from \"react-helmet\"\nimport { useStaticQuery, graphql } from \"gatsby\"\n\nconst SEO = ({ description, lang, meta, title }) => {\n  const { site } = useStaticQuery(\n    graphql`\n      query {\n        site {\n          siteMetadata {\n            title\n            description\n            author {\n              name\n              summary\n              social {\n                github\n              }\n            }\n          }\n        }\n      }\n    `\n  )\n\n  const metaDescription = description || site.siteMetadata.description\n  const defaultTitle = site.siteMetadata?.title\n\n  return (\n    <Helmet\n      htmlAttributes={{\n        lang,\n      }}\n      title={title}\n      titleTemplate={defaultTitle ? `%s | ${defaultTitle}` : null}\n      meta={[\n        {\n          name: `description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:title`,\n          content: title,\n        },\n        {\n          property: `og:description`,\n          content: metaDescription,\n        },\n        {\n          property: `og:type`,\n          content: `website`,\n        },\n        {\n          name: `twitter:card`,\n          content: `summary`,\n        },\n        {\n          name: `twitter:creator`,\n          content: site.siteMetadata?.social?.twitter || ``,\n        },\n        {\n          name: `twitter:title`,\n          content: title,\n        },\n        {\n          name: `twitter:description`,\n          content: metaDescription,\n        },\n      ].concat(meta)}\n    />\n  )\n}\n\nSEO.defaultProps = {\n  lang: `en`,\n  meta: [],\n  description: ``,\n}\n\nSEO.propTypes = {\n  description: PropTypes.string,\n  lang: PropTypes.string,\n  meta: PropTypes.arrayOf(PropTypes.object),\n  title: PropTypes.string.isRequired,\n}\n\nexport default SEO\n"],"sourceRoot":""}